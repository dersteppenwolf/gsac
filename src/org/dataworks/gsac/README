
               #######################################################################/
               ########################################################################

                                     Dataworks GSAC Installation     

                               (an instance of the GSAC README Part 2)

About Dataworks.

Dataworks is a UNAVCO project.  The web site is https://www.unavco.org/software/data-management/dataworks/dataworks.html.

The goal is to provide services to find and download GNSS RINEX obs, met, and nav data files from a data center, using GSAC, and 
"mirroring" information from the UNAVCO GNSS archive.  Dataworks also has Python code to receive GPS receiver files 
from your local GPS receivers and populate the Dataworks GSAC database.  Dataworks is not intended for general-purpose GSACs.
Dataworks is for one GPS network with stations already in the UNAVCO archive, plus one or more local GSP stations (not archived at
UNAVCO) which you receive directly.

Dataworks includes:

- a particular instance of GSAC, what you are building here.
- a MySQL database with the Dataworks schema and .sql file, to work with the Dataworks GSAC. The .sql file is Dataworks_demo.sql in the 
  GSAC package at gsac-code/src/org/dataworks/gsac/. This demo file has actual station (site) and data file values
  from the COCONet network, to show good examples of a complete working GSAC database.  There are rows for 2 stations, 4 equip_config rows,
  and 156 rows in the datafile table for GNSS files from the two stations. Remove these COCONet rows after your have a working 
  test version of your GSAC.
- Python code to "mirror" (copy) information about GNSS sites and data files from UNAVCO to populate the Dataworks GSAC database.
  The files are  mirrorData.py and mirrorStations.py in the GSAC package at gsac-code/src/org/dataworks/gsac/.
  Those files have headers which tell how to use them.
- Python code to receive GPS receiver files from your local GPS receivers and populate the Dataworks GSAC database (not available from GSAC).

For Dataworks GSAC, be sure you used the main GSAC package in SourceForge, not a 'branch'.  The main GSAC installation is described in the
GSAC installation web page http://www.unavco.org/software/data-management/gsac/installation/installation.html
and in the README files in the main GSAC package, with dates after 16 March 2015.


Before you can use a complete Dataworks GSAC, you need to:
> create and populate your database, starting with the file Dataworks_demo.sql. You may change the name of the database
  from "Dataworks_demo" to some other name, by editing the file Dataworks_demo.sql.  You need not change the filename of the file Dataworks_demo.sql. 
  You may use the db name Dataworks_demo with no problem.
> complete the build and deployment of the GSAC, detailed in this file, as follows.



You have completed the code GSAC installation in the first README file ("Part 1" in the GSAC core code area gsac-code/src/org/gsac/).

This README file describes how to complete your new Dataworks GSAC.  This README (Part 2) file is located in your new "local GSAC code area" src/org/dataworks/gsac/.


The GSAC package is ready for Java 1.7 builds.  Java 1.7 is recommended for recent security features.
To build GSAC for Java 1.6, make the following changes:
   - make sure your java and javac are for Java 1.6, not Java 1.7. On Linux, do which java and which javac and make sure the versions are the same and for Java 1.6
   - Do the code changes for Java 1.6 in README part 1 (you should have done this already).
   - in file DataworksServer.java, edit the file to use the "Java 1.6 version" lines and comment-out the lines for "Java 1.7 version."
   - copy the file gsac-code/src/org/dataworks/gsac/build.xml.dataworks.Java6 to the file named build.xml in the same directory (overwrite the previous build.xml).


The main steps remaining to build a complete working GSAC are these: 
    - edit src/org/dataworks/gsac/resources/gsac.properties
    - edit src/org/dataworks/gsac/dbresources/gsacdb_test.properties
    - ant           (this builds GSAC with the Dataworks Java code, Tables.java, and with your properties files. There should be no errors.)
    - ant runserver (to execute your complete new GSAC on your local development platform, to  see on your browser).
    - stop the 'ant runserver' process with CTRL-c  
    - deploy the Tomcat .war file, or with Jetty.


A fictional data center called "Boulder" is used in examples here.


Edit the resources/gsac.properties file:

The file org/dataworks/gsac/resources/gsac.properties has  properties about your GSAC installation.

For example:

    #no need to change this line:
    gsac.baseurl = /dataworksgsac

    #Your repository name
    gsac.repository.name=Boulder GPS Repository
    #Your repository description
    gsac.repository.description=The Boulder GPS Repository 

Change the items for your GSAC repository.  The  gsac.baseurl is used in a URL to a GSAC server such as the 
"gsacws" in  http://cddis.gsfc.nasa.gov/gsacws/gsacapi/site/form.  You can use  an acronym for identification of your agency, for example 'acrogsac'.
The items repository.name and repository.description are used as labels on the web site.



Setting database information: Edit the dbresources/gsacdb_test.properties file:

You code the file, org/dataworks/gsac/dbresources/gsacdb_test.properties, to hold the database name and db account details,
to permit the GSAC web server process to read from the geodesy database.  The contents are like:

        gsac.db.username=db-gsac-username
        gsac.db.password=db-gsac-password

        gsac.db.jdbcurl=jdbc:mysql://localhost:8080/Dataworks_demo?useUnicode=yes&characterEncoding=UTF-8

        #gsac.db.jdbcurl=jdbc:oracle:thin:${username}/${password}@<hostname>:<port>:<database>

        #gsac.db.jdbcurl=jdbc:postgresql://<hostname>/<database>
        ##

Be sure to use your Database name which may not be "Dataworks_demo".

The database host (like localhost or boulderdev.mydomain.org), port (8080), account user name and account password are all given.  
When the GSL assembles the JDBC URL it finds the user name and password from these.  
The database must have an account GSAC can use to read from the database.  (GSAC does not write to any database.)

Oracle and Postgres have different syntax for the 'jdbc' line in this filex, as shown.  Also for Postgres the form is 

=jdbc:postgresql://<hostname>:<port>/<database>.  

One Oracle JDBC URL is of the form:

=jdbc:oracle:thin:${username}/${password}@<hostname>:<port>:<database>, 
   e.g:
=jdbc:oracle:thin:${username}/${password}@db1.ap.int.program.org:1521:gpsdb

The file org/dataworks/gsac/dbresources/gsacdb_production.properties is not used now. It can be empty.

(Everytime you do "ant" to build your repository, the file
   myrepo/gsac/dbresources/gsacdb_test.properties
is copied to the file
   myrepo/gsac/resources/gsacdb.properties
and also copied to
   myrepo/gsac/resources/gsacserver.properties.
This can be a little confusing if you attempt to keep track of the several properties files.)



Building GSAC

Check that the file build.xml, in your location org/dataworks/gsac has these lines. 
Note that the value represented by 'dataworksgsac' 

    <target name="localinit">
        <!-- base name for build products -->
        <property name="basename" value="dataworksgsac"/>

No changes are needed here unless something went wrong.  This target will be used by ant build process to make your GSAC server.  

Do the command 'ant' in org/dataworks/gsac: 

ant 

When the ant command succeeds you will see output to the screen something like this

compile:
    [javac] Compiling 7 source files
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
gsacjar:
     [echo] Making jar /home/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0.jar
     [jar] Building jar: /home/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0.jar
and including
war:
     [copy] Copying 1 file to /home/gsac/sourceforge/gsac/gsac-code/dist
   [delete] Deleting:         /home/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0/servlet-api.jar
      [war] Building war:     /home/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder.war
     [echo] ********************************
     [echo] To run the server run:
     [echo] ant runserver
     [echo] ********************************
BUILD SUCCESSFUL
Total time: 8 seconds

This ant command builds GSAC for your repository.

It uses core GSAC (GSL) code from the jar file  gsac-code/lib/gsacws.jar.  If you change core GSAC code,
as if you do an svn update to get new core code from SourceForge for GSAC,
you must rebuild with ant in gsac-code/, and then rebuild your GSAC with ant in org/dataworks/gsac

Your ant build also creates a new Tomcat "war" file, named something like gsacboulder.war, located in gsac-code/dist/, 
which will be used as the servlet (application) container for your public web site, if you use Tomcat. 

If you happen to use two or more GSACs, doing 'ant' one for one removes the .class files for the others.  So you
must do ant again for another GSAC to do ant runserver there, after doing ant in this GSAC area.
Doing ant in the core GSAC code area also removes all local GSAC .class files so you must do ant here again.


(The file database/Tables.ajav provides the link between your database and your GSAC code.  
Names of items (Java variables) in the class files made from Tables.java to identify your database tables and columns (fields)
in GSAC Java code.  For example, one table name may be, in GSAC code, Tables.STATION, and a column (field) in that table might be 
Tables.STATION.COL_LATITUDE or COL_IERS_DOMES_NUMBER.  Look at your Tables.java file; you will use variable namees in it when coding soon.



Test your GSAC

Now start the new GSAC web server with the command:

ant runserver

This command runs the Dataworks GSAC, on your local desktop where you are developing your GSAC.  

Screen output of the ant command includes a line like

GSAC INFO: Tue Aug 28 14:33:59 EDT 2013: GsacServlet: url:http://mycpuname:8080/gsacDataworks/gsacapi
 or 
     [java] Running stand-alone GSAC server at: http://localhost:8080/bouldergsac

This means your GSAC test is running at the URL shown.  The local host value, 8080, is declared in the build.xml for 
running ant runserver.  If you already use 8080 for another purpose, enter a different value in build.xml.  It is 
also in the gsacrepository.sh for when running stand-alone.

In a browser on your desktop where you are developing your GSAC, look at that URL, like 

http://mycpuname:8080/gsacDataworks/gsacapi.  

You should see your complete and working GSAC (complete if the database is populated).

The web pages have nominal headers; see the next section to make your header.html file.

Stop the 'ant runserver' process with CTRL-c.  

This local test of GSAC uses Jetty, http://www.eclipse.org/jetty/, a Java HTTP server and Java servlet container.  
The Jetty servlet is for local testing, which saves the trouble of deploying a .war file to a Tomcat implementation 
(and may avoid restarting Tomcat for every test of the new GSAC).  Public web servers often run with Tomcat in place of Jetty.


Create Your GSAC Web Site Page Contents, Header, Footer, and Images 

You must specify details of the header and footer used on GSAC web pages, and the home page contents.

The files footer.html and header.html, in the directory dataworks/gsac/resources/, specify the top and bottom of the GSAC web pages.
These files may be simple, or fully developed such as using css. To include an image in the header and footer html files
use <img  src="${htdocs}/home-page-header_1.jpg" >. All web page image files are in your htdocs/ directory.
Include an email address for Contact or Support in your header or footer.  If persons using your GSAC have
questions, they need an easy way to reach you.  

Installing GSAC initially creates a short version of its web site home page which says only "Welcome to GSAC." 
You can add more to this file for a larger pagei with images and logos, using normal HTML.  You can also create HTML code for the header and a footer 
which will be used at the top and bottom of all the web pages in your GSAC site.

The contents of a home page of a GSAC repository web site is contained in an index.html file.
In your GSAC code area, use mkdir htdocs to create htdocs/ in dataworks/gsac/.
For the  Dataworks GSAC there is already a template file, src/org/dataworks/gsac/htdocs/index.html
which is used for a template for other new GSACs.

Edit your htdocs/index.html file to create your GSAC home page contents.  Put image files used on the web main page in the directory htdocs.
Note that the index page does not have a complete set of HTML lines, found on a typical web page, 
including <html> at the beginning, or the final </html>, since the index contents
are wrapped inside the GSAC header and footer HTML files, mentioned next.

In the index.html file, add images with HTML like <img src="dataworks/gsacapi/htdocs/COCONet_stations_map.png">
As usual in HTML images also may be retrieved from another web server with any URL, for example, with <img src="http://www.nasa.gov/images/gps_satellite.gif">.

The content of GSAC web pages with search forms, and pages with static GSAC information such as the GSAC Help pages,
are provided by GSAC installation. They use your header and footer HTML files.  Is it possible to modify the GSAC search forms 
with Java programming in the core GSAC code, but we urge you to write to UNAVCO if you see need for a change.  For consistency with
other GSAC repositories, and for problem-free operation in a federated GSAC, it is best not to modify core GSAC code.


Deploy GSAC to Tomcat

Building GSAC (in the src/org/demo/gsac directory, run ant) makes a Tomcat .war file in the dist/ folder: 

 gsac-code/dist/gsacDemo.war.   

Copy this file to the Tomcat folder for .war file folder on your web server host.  For example, 
on the Tomcat server, do something like

cp gsacDemo.war /usr/local/apachetomcat/webapps

The GSAC server web should be available in a moment, if you are using "hot deploy," without a restart of Tomcat.
    
You can see the log of Tomcat actions by doing for example,

 tail -f /usr/local/apachetomcat/logs/catalina.out
    
If for some reason Tomcat and hotdeploy are misbehaving, or to restart Tomcat, you can do:

sudo /etc/init.d/tomcatdev stop
sudo /etc/init.d/tomcatdev start

to restart tomcat and force a read of the .war files already in /usr/local/apachetomcat/webapps/.

The Tomcat's servlet reads the properties file:
/usr/local/apachetomcatdev/conf/gsacigs.properties
which contains the database authentication info. This is in the .war file.


End of README for Dataworks GSAC.

########################################################################
########################################################################

