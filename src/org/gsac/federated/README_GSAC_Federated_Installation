
          How to install a Federated GSAC web services server
                        12 March 2014

To learn about what are GSAC web services and federated GSACs, see the UNAVCO GSAC web site.

Installing a federated GSAC is much simpler than installing GSAC for a data repository. 
You do not use a database for a federated GSAC.  Do not refer to the automtically-generated 
default file README in src/org/gsac/federated/, which is incorrect.

If you have not already installed GSAC in any way, do the following step 1. Otherwise go to step 2.

###########################################   ###########################################

1.  Install the GSAC package.

First Read "Installing GSAC Web Services -- System Requirements" in the UNAVCO GSAC web site.

Install GSAC core code, as described in the GSAC web site, repeated here:

    GSAC has a set of core Java code (the "GSAC Service Layer," or GSL), and related code.

    You download the GSAC code from SourceForge, and compile it without making any changes to it.  

    Get GSAC from SourceForge

    Choose or make a top-level working directory for GSAC, and go there. For example:

    mkdir ~/GSAC/

    cd    ~/GSAC/

    Check out the GSAC code from SourceForge by entering this command:
    (to find this command at SourceForge, go to https://sourceforge.net/projects/gsac/,
      and click on the 'Code' menu item in the 'Summary Files ...' menu line.)

    svn export svn://svn.code.sf.net/p/gsac/code/trunk gsac-code

    (svn export    simply downloads all the files for the project, with no revision control permission required.  
     svn checkout  is used if you have a developer's role, to check in new code to GSAC on SourceForge.)

    The svn export creates a new folder named gsac-code, and many folders and files in it.

    Build the GSAC core code.

    cd gsac-code/

    Do an initial ant build with the command:

    ant

    Look for any error messages.  If there are none, you have completed the GSAC core code.  
    This process makes a Java jar file, named gsacws.jar, in GSAC/gsac-code/lib/, with size about 5 MB.
    This file contains the executable GSAC core code, in effect.  This jar file will be used to build your final Java jar file for your complete GSAC server code.

End of installation of GSAC core code.

###########################################   ###########################################

2. Specify connections to remote GSACs.

Go to the gsac/federated/ directory in your GSAC package, for example, something like  ~/GSAC/gsac-code/src/org/gsac/federated/.  
The files to make a federated GSAC are here.

Edit the file resources/gsacserver_test.properties to specify the values for the remote GSAC to use.  Lines beginning with # are comments.

    # For a federated GSAV, specify remote GSACs to use, and your GSAC's host.
    # (This file gsacserver_test.properties gets copied to gsacserver.properties when you do ant.)

    # Set the host name and port for the repository (your local server info, where your GSAC will run):
    gsac.server.hostname=facdev.unavco.org
    gsac.server.port=80

    # For the remote GSACs to connect to, specify;
    #gsac.federated.servers= plus a comma-separated list of the remote GSACs (your own names, for use in this file only)
    #gsac.federated.<id>.url= a known URL for a remote GSAC, or the "Base URL" from the Infomation page on each remote GSAC web site (which can in some cases be incorrect).
    #gsac.federated.<id>.name=name of remote GSAC repository 
    #gsac.federated.<id>.icon=url to a small icon for that remote repository. Will be used inside web page tables of results, so a height < 50 pixels is good.

    gsac.federated.servers=geoazur,noanet

    gsac.federated.geoazur.url=http://epos.unice.fr/renagbgsac  # non-working example url
    gsac.federated.geoazur.name=Geoazur GPS Repository
    gsac.federated.geoazur.icon=https://geoazur.oca.eu/IMG/png/OCA.png

    gsac.federated.noanet.url=http://gsac-hp-workstation-xw6200/gsacnoanet # non-working example url
    gsac.federated.noanet.name=NOANET GSAC Repository
    gsac.federated.noanet.icon=http://www.gein.noa.gr/services/GPS/NOA_GPS/noa_gps_files/images/temp/sample-post-1.jpg

Ignore the file resources/gsacserver_production.properties.

###########################################   ###########################################

3. Edit files for your federated GSAC.

Edit federated/resources/header.html to create your GSAC web pages headers.
Images are kept in federated/resources/htdocs.

There is a good default file federated/resources/footer.html, for your GSAC web pages.
You may change it, if you wish to.

The FederatedSiteManager.java and FederatedResourceManager.java files should NOT be changed. Make no changes to
any java files in gsac/federated/.


###########################################   ###########################################

4. Build and deploy GSAC.

To build  your federated GSAC, do

ant

in gsac/federated/.

This ant command will copy resources/gsacserver_test.properties to resources/gsacserver.properties.

The ant build makes a new Tomcat war file in your gsac dist/ directory, such as:

GSAC/gsac-code/dist/gsacfederated.war

To see the exact path, look in the ant build screen output for a line like this:

    [war] Building war: /home/devel/GSAC/gsac-code/dist/gsacfederated.war

Copy the gsacfederated.war file to your Tomcat server area, such as

/usr/local/apachetomcat/webapps/

If you use HotDeploy the new GSAC server will be deployed and the federated GSAC will be available.
Without Hotdeploy you will need to restart the Tomcat service.


