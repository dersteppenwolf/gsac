
########################################################################

Part 2.

This file describes how to complete your new '@MACRO.SRCDIR@' GSAC-WS Web Services suite,
to provide web service access to site-located data in a geoscience data repository.

You should have first read and followed the Part 1 README file in trunk/src/org/gsac/.  

If you are confused, can't find the Part 1 README, or did not do the instructions in it,
please refer to the "Installing GSAC-WS" section in the report "UNAVCO GSAC WS: Web Services for Geodesy Data Repositories" 
on the UNAVCO GSAC WS home page, http://facility.unavco.org/data/gsacws/gsacws.html

This README was generated from the template package during your initial package build, as described in README Part 1.

Some file names in ***this README file***, such as gsac@MACRO.PREFIX@.properties,
may have one or more upper case letters. The ccoresponfing actual GSAC files lack upper case in their names. 
Do not change actual filenames to match uppercase letters, if any, in the README files.

########################################################################

This README is found in your new GSAC package.  

This file is the second part of the instructions to build a GSAC server for your data repository.
You should have already followed the Part 1 instructions in src/org/gsac/README.  

Hopefully you've managed to generated the initial repository source package.

Now, change the working directory to @MACRO.SRCDIR@

Do ant there:

ant 

This ant command builds an initial new GSAC server for your repository.  (It also creates a new Tomcat war file, 
something like gsac/sourceforge/gsac/trunk/dist/gsac@MACRO.PREFIX@.war, which will be used, eventually, for your public web site,
if you use Tomcat.)  

Now try:

ant runserver

This command runs the new '@MACRO.SRCDIR@' GSAC repository server, on your local system.  
Screen output of the ant command includes a line like

GSAC INFO: Tue Aug 28 14:33:59 EDT 2012: 
GsacServlet: url:http://mycpuname:8080/gsac@MACRO.PREFIX@/gsacapi

In a browser, look at that URL, http://mycpuname:8080/gsac@MACRO.PREFIX@/gsacapi.  
You should see a new web page with minimal content, with a line of links like
Search Sites | Search Files | Browse | Infomation | Help

This shows that the GSAC code runs on your system.  This web 'site' uses Jetty  (see http://www.eclipse.org/jetty/), 
a Java HTTP server and Java servlet container.   The Jetty servlet is for local testing, 
which saves the trouble of a full Tomcat implementation, and avoids (possibly) restarting Tomcat 
for every test of the new GSAC.  Public operational systems often run with Tomcat in place of Jetty.

Stop the ant runserver process with CTRL-c.  You've generated the GSAC repository source package 
and an initial new GSAC server.

So far you have been bootstrapping a operational GSAC server which has complete core GSAC code 
but which lacks many specific details about your repository.

Now you need to specify important details about your particular repository, such as what 
fields in your database users may search on, and what metadata from your database is provided 
as results from queries of your GSAC services.


####################
########################################################################
Adding Your Repository's Details
########################################################################
####################


########################################################################
Configuration  : Your GSAC Properties Files
########################################################################

The file resources/gsac.properties has a number of properties to specify, for example, 
the base url which will be part of the full URL of the website about your GSAC repository.
such as 'gsacws' in the URL of GSAC at CDDIS, http://cddis.gsfc.nasa.gov/gsacws/gsacapi/site/form.
(The terms 'gsacapi/' and 'site/form' are always part of a GSAC URL.)

    An example, the file igs/gsac/resources/gsacigs.properties in the UNAVCO "IGS GSAC":
    #
    #This gets read by the base GsacRepository class for defining properties
    #This allows you to override the default properties defined in
    #org/gsac/gsl/resources/gsac.properties
    #
    ##what is the base url used
    gsac.baseurl = /gsacigs
    #Your repository name
    gsac.repository.name=IGS GSAC Repository
    #Your repository description
    gsac.repository.description=The IGS GSAC Repository, a UNAVCO Site Log Manager in GSAC-WS

The items repository.name gind sac.repository.description are used as labels on the web site.

You can also set a maximum size when zipping up files, e.g. 100 MB, in bytes:    
    file.zip.maxsize=100000000 

Hiding DB account information

You create a *second* properties file to give the account details to permit the GSAC web server process to read from the geodesy database.
Usually this file is in your GSAC's 'gsac/' directory, such as trunk/src/org/igs/gsac/gsacigs.properties, with contents like:

    gsac.db.username=db-gsac-username
    gsac.db.password=db-gsac-password
    gsac.db.jdbcurl=jdbc:mysql://igsdev.unavco.org:3080/igsgsdb

When the GSL assembles the JDBC URL it also looks up the user name and password to use  to connect to the database.

Note that Oracle and Postgres have different syntax for the last line above.  
For postgres the form is jdbc:postgresql://<hostname>:<port>/<database>.  One Oracle JDBC URL is of the form:
jdbc:oracle:thin:${username}/${password}@<hostname>:<port>:<database>, 
e.g:
jdbc:oracle:thin:${username}/${password}@db1.ap.int.program.org:1521:gpsdb

NOTE if you check this code into a software repository, such as with svn, this db account information may be made public.
Do not 'add' or 'commit' a gile with private db account info.

Then add to build.xml, in your location corresponding to trunk/src/org/igs/gsac/, to add a new section like the one


########################################################################
Database Driver and Server Connection Information
########################################################################

In @MACRO.SRCDIR@/dbresources/, for development change the database properties file gsacdb_test.properties 
(and for final release, also change the file gsacdb_production.properties)
to specify: 
Add to name your database driver
gsac.db.driverclass=com.mysql.jdbc.Driver  

Other possible choices for this line are 
gsac.db.driverclass=oracle.jdbc.driver.OracleDriver  
(see http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html) 
and a Postgres driver (see http://jdbc.postgresql.org/).

Both the gsacdb_(test,production).properties files may be exactly the same, or may differ 
if you use different databases for development and production.

You may put the hostname and port of your web server in the gsacserver_(test,production).properties
files:
# Server info
#gsac.server.hostname=
#gsac.server.port=9090   

The hostname is optional.  The port defaults to port 8080 for when running stand-alone,
or you can define it in this properties file.



########################################################################
Reading Your Database: Making Tables.java
########################################################################

GSAC has to be able to identify the tables and columns (fields) in your database,
which will be used in database queries generated by the GSAC web form searches, and by incoming requests of the GSAC API.
There is a nice utility to generate a Java class (Tables) that holds all of your
database table names and columns (fields) in the tables.  This allows you to not have String table and column
names permeate your code.

To generate the Tables.java source code file, after you have a connection set up to the database, in @MACRO.SRCDIR@, 
run

ant tables   

Screen output from a successful run should include lines like these, showing names of tables in your database:

tables:
     [java] processing AGENCY
     [java] processing COUNTRIES
     [java] processing EQUIPMENT
     ...

This process will read your database and make a new file @MACRO.SRCDIR@/database/Tables.java. 
The Java code defines classes with methods, such as the next code block for a table about GPS recievers, 
with methods getName() which gives the table name, and getColumns() which returns names for fields 
in that table about GPS receivers, and which defines new String variables.

     public static class STATION_IDENTIFICATION extends Tables {
        public static final String NAME = "Station_Identification";
        public String getName() {return NAME;}
        public String getColumns() {return COLUMNS;}
        public static final String COL_MARKERNAME =  NAME + ".MarkerName";
        public static final String ORA_MARKERNAME =  "MarkerName";
        public static final String COL_MARKERNUMBER = NAME + ".MarkerNumber";
        public static final String ORA_MARKERNUMBER = "MarkerNumber";
        public static final String COL_LATITUDE =  NAME + ".Latitude";
        public static final String ORA_LATITUDE =  "Latitude";
        public static final String COL_LONGITUDE =  NAME + ".Longitude";
        public static final String ORA_LONGITUDE =  "Longitude";
        public static final String COL_CITY =  NAME + ".City";
        public static final String ORA_CITY =  "City";
        public static final String COL_COUNTRY =  NAME + ".Country";
        public static final String ORA_COUNTRY =  "Country";
        public static final String[] ARRAY = new String[] {
            COL_MARKERNAME,COL_MARKERNUMBER,COL_LATITUDE,COL_LONGITUDE,COL_CITY,COL_COUNTRY,COL_PROPOSITIONDATE,COL_COMMITMENTLETTER,COL_CONSISTENT_RINEX_FILES,COL_INDIVIDUALCALIBRATION,COL_DATAQUALITY,COL_DENSIFICATIONSITE,COL_COLLOCATEDINSTRUMENT,COL_INTERESTEDANALYSISCENTRES,COL_HOURLY_DATA,COL_ECGN_DATA,COL_MAINDATACENTRE,COL_TIDEGAUGE,COL_REMARK
        };
        public static final String COLUMNS = SqlUtil.comma(ARRAY);
        public static final String NODOT_COLUMNS = SqlUtil.commaNoDot(ARRAY);
    public static final STATION_IDENTIFICATION table  = new  		STATION_IDENTIFICATION();
    };

The ant table command builds the corresponding Table* class files in @MACRO.SRCDIR@/database/.



########################################################################
"GSAC Standard Geodesy Parameters" and  "Conforming GSAC Geodesy Repositories".
########################################################################

A key concept to enable GSAC geodesy repositories to operate in a consistent and expected way, to be part of GSAC federations, and to be install GSAC without requiring writing new Java source code, is the Conforming GSAC Geodesy Implementation.   We strongly encourage you to implement a conforming GSAC repository. 

GSAC may be used for data repositories for any data source with metadata for instruments at fixed locations (but nor aircraft or buoys, for example), and optionally to download data files from the instruments.  For geodesy data from instruments at monuments, GSAC software includes a way to provide standard paramerers and to simplify installing a repository which provides values for those parameters.

What makes a GSAC geodesy implementation conforming is that it supports the GSAC standard geodesy parameters list, which are fields in your underlying database.  These parameters are used in GSAC queries and / or their values may appear in results of GSAC queries.  All standard parameters are required for a "Conforming GSAC Implementation." 

The GSAC standard parameters are ... 

You identify which fields in your database correspond to the standard GSAC parameters, with a one to one match of Tables.java items to standard parameter names.  You do this by editing the file standard_parameters.properties.   Each line begins with GSAC's internal name for a standard parameter, such as site.latitude, followed by a comma. You complete the line with a table and field name from the Tables.java file (which represents your database contents, such as    

site.latitude,SITELOG_LOCATION.COL_LATITUDENORTH

If your system fails to provide a standard parameter, leave that line empty after the first comma.  GSAC will still function but its actions can not be guaranteed since we can not code GSAC to provide in advance for every possible combination of missing data.

If you wish to present more parameters in addition to the standard parameters, you can write new Java code in GSAC to implement in them queries, or to go to output results.  
You must identify which fields in your database correspond to the parameters in the list...
[new properties or config file with one to one match of Tables.java items to standard parm names]

FIX MORE here

MORE also need 
new code to implement in queries (some  parms to go to output result files)





########################################################################
Choosing Format Options for Query Results
########################################################################

GSAC services  offer choices for formats of the results of queries.  For example, on any GSAC web site, 
under Site or File Search, open the [+] options list under Results, to see some choices of format names.  

The default code for GSAC offers the four formats: HTML (chiefly for the web pages), the SOPAC XML site log, 
SINEX, and GAMIT's station.info format.  Note that these are all standard formats in 
geodesy.  GSAC does not create, or endorse, file formats.  If there is a widely used format which GSAC should 
offer, you can contact UNAVCO to add it to GSAC code, or you can add a new "OutputHandler" Java class yourself
(in trunk/src/org/gsac/gsl/output/sites/).

The choices of what to show in GSAC are set in the file trunk/src/org/gsac/gsl/SiteManager.java,
in the method initOutputHandlers().  Here is the default code to set which formats to
offer as choices, which GSAC comes with:

 public void initOutputHandlers() {
        super.initOutputHandlers();
        // for web pages and other HTML uses:
        new HtmlSiteOutputHandler(getRepository(), getResourceClass());
        // for SOPAC XMP site log format 
        new XmlSiteLogOutputHandler(getRepository(), getResourceClass());
        // for SINEX format  
        new SinexSiteOutputHandler(getRepository(), getResourceClass());
        // for GAMIT's station.info format  
        new StationInfoOutputHandler(getRepository(), getResourceClass());

        // new XmlSiteOutputHandler(getRepository(), getResourceClass());
        // new SiteLogOutputHandler(getRepository(), getResourceClass());
        // new KmlSiteOutputHandler(getRepository(), getResourceClass());  // for Google Earth KMZ and KML
        // new TextSiteOutputHandler(getRepository(), getResourceClass());
        // new RssSiteOutputHandler(getRepository(), getResourceClass());
        // new AtomSiteOutputHandler(getRepository(), getResourceClass());
        // new JsonSiteOutputHandler(getRepository(), getResourceClass());
    }

The output handler code for the four default formats, HTML, SOPAC XML site log format,
SINEX, and GAMIT's station.info format, handle (or will handle) the "standard parameters" in a 
"conforming GSAC geodesy implementation."

If you are satisfied with your GSAC repository offering these four formats, 
you need do nothing more about output format choices. Go to the next topic.

To change which formats you want to offer at your GSAC repository, edit the file
trunk/src/org/gsac/gsl/SiteManager.java.  Go to the  method initOutputHandlers().
Comment out (with //) the lines for formats you do not wish to offer, or remove the '//' before any hidden output handlers you wish to see,
and rebuild GSAC with ant. 

Note that only the four default formats present all the  "standard parameters" in results.
The others are not all complete.  You of course may add to incomplete output handlers (in trunk/src/org/gsac/gsl/output/sites/).
Please do *not* check in this modified SiteManager.java file into SourceForge.

You may create a new kind of format by writing a new Java class, similar to 
any of the above output handlers, such as HtmlSiteOutputHandler.  The Java source files are
in   trunk/src/org/gsac/gsl/output/site/.  You can use the current output handle files as
guides to what is needed in a similar Java class.   For example, if you wished to provide an different 
kind of HTML output, you could create a new Java class with a new file such as 
trunk/src/org/gsac/gsl/output/site/ANewHtmlSiteOutputHandler.java. 


########################################################################
Extending Java Classes (Java Code changes)
########################################################################

The @MACRO.PREFIX@Repository is the main entry point. It mostly creates the @MACRO.PREFIX@SiteManager 
and/or @MACRO.PREFIX@FileManager objects.

Files in @MACRO.SRCDIR@ have the Java code for your repository.   The Java file @MACRO.PREFIX@Repository.java is the main entry point, where you add much of the code for the new repository.   Also the files @MACRO.PREFIX@SiteManager.java and @MACRO.PREFIX@sFileManager.javafiles will be changed to implement database queries used by your GSAC web form searches and by the GSAC API.  See the lines in the Java classes in those files marked with CHANGEME in the comments, for what needs to be changed. 

For a more detailed description of adding to the GSAC Java files, you may review code in other 
GSAC implementations checked into SourceForge, such as the file org/igs/gsac/IgsSiteManager.java.

Add to these files:

IgsRepository.java 

Above the import lines, add the new Java package name, in this form:
package org.@MACRO.PREFIX@.gsac; 

In the method initResourceManagers(),  uncomment 
     super.initResourceManagers();

to search on both sites and data files in the database.  (See other code in that method if you need to only search on only sites or only files: getResourceManager(GsacSite.CLASS_SITE) and getResourceManager(GsacFile.CLASS_FILE).)


IgsFileManager.java 

This class has 3 'changeme' sections:

doGetQueryCapabilities()

handleRequest(

getResource(


IgsSiteManager.java  

This class has 5 'changeme' sections...

doGetQueryCapabilities() - defines things to search on

handleRequest

getResource

Default query order"

makeResource

and also a change in getResourceSelectColumns().


More examples about extending Java.

GSAC core code provides a few common data values, such as latitude of a site.  For your GSAC you probably need to use additional values from your database for data searches or results.

These examples are from code for the IGS Site Log Manager implementation of GSAC.  Since you have downloaded the GSAC code from SourceForge, you already have these files to look at.  The ISG GSAC code was checked into SourceForge as part of the GSAC.

GSAC uses a consistent capitalization style to identify classes in Tables.java (from the database table names) and field names, in in other Java files, Java variables and Java methods.  We strongly urge you to follow this convention to aid code readability and maintenance.

To demonstrate how to add a new field's value from your database to the HTML (web page) results, here is the code for a database value called frequency standard, which in this database indicates the kind of clock used by a GNSS receiver.  

The database used by this GSCA implementation is represented in Java by the file org/igs/gsac/database/Tables.java.  In that file there is a Java class for a db table called SITELOG_FREQUENCYSTANDARD, with a db field variable String COL_STANDARDTYPE.  You use these Java variables to write the new code.  Do not modify Tables.java; it was created when the IGS GSAC template was built.  You do need to look in  Tables.java to find the Java names for items you want ot use from your database.

In the file org/gsac/gsl/GsacExtArgs.java one new line was added to template code by the person who implemented the IGS Site Log Manager GSAC:
    public static final String METADATA_FREQUENCYSTANDARD = "metadata.frequencystandard"; 
This declares a new Java variable to hold the value extracted from the database, for one GPS receiver station or site.

In the Java file org/igs/gsac/IgsSiteManager.java is a new method, added to template code by the person who implemented the IGS Site Log Manager GSAC:

private  void readFrequencyStandardMetadata(GsacResource gsacResource) throws Exception { 
  // get  from db table represented as class SITELOG_FREQUENCYSTANDARD the value of String COL_STANDARDTYPE 
        // compose db query statement; 'order by' phrase is null. 
        Statement statement = getDatabaseManager().select(Tables.SITELOG_FREQUENCYSTANDARD.COLUMNS, 
                                        Tables.SITELOG_FREQUENCYSTANDARD.NAME, 
                                        Clause.eq(Tables.SITELOG_FREQUENCYSTANDARD.COL_FOURID, gsacResource.getId()), 
                                        (String)null, -1); 
        ResultSet  results; 
        try { 
            // do db query 
            SqlUtil.Iterator iter = getDatabaseManager().getIterator(statement); 
            // process each line in results of db query; the GsacExtArgs item must have been added to GsacExtArgs.java. 
            while ((results = iter.getNext()) != null) { 
                addPropertyMetadata(gsacResource,GsacExtArgs.METADATA_FREQUENCYSTANDARD, "Clock", 
                                    results.getString(Tables.SITELOG_FREQUENCYSTANDARD.COL_STANDARDTYPE)); 
                break; 
            } 
        } finally { 
            getDatabaseManager().closeAndReleaseConnection(statement); 
        } 
    } 

This reads the frequency standard value from the database.  The term "Clock" is a label for search results in the HTML web page of results.

Then in the same Java file, add to the method 
    public GsacSite makeResource(ResultSet results)
the call to the new method:
  readFrequencyStandardMetadata(site); 
This method makeResource() makes the HTML output (web page) for the results from one site.

Build the new GSAC, in this case with "ant" in org/igs/gsac/.  Then test your changes with "ant runserver."

This finds the frequency standard value at a site, and adds it to the HTML result for a web page of results.

To add the value to other GSAC site result formats, see these files:
for  SOPAC XML Site log format, org/gsac/gsl/output/site/XmlSiteOutputHandler.java
for  csv result format,         org/gsac/gsl/output/site/TextSiteOutputHandler.java 
for  JSON result format,        org/gsac/gsl/output/site/JsonSiteOutputHandler.java 

Data items which pertain to equipment (such as GNSS receivers and related instruments) have a special Java class
    org/gsac/gsl/metadata/gnss/GnssEquipmentGroup.java.  
Let's see how to add an equipment value to GSAC output.  We will again refer to core GSAC code, and code in the  IGS Site Log Manager GSAC.  Use this code as a template for writing new code about your equipment metadata.

In  org/igs/gsac/database/Tables.java there is a Java class, representing a database table, called SITELOG_RECEIVER, with a variable String COL__FIRMWAREV, for the database's field holding the firmware version. You use these Java variables to write new code.  (Do not modify Tables.java) 

In the method  
    private void readEquipmentMetadata(GsacResource gsacResource) in org/igs/gsac/IgsSiteManager.java
is one line:
    equipment.setReceiverFirmware(results.getString(Tables.SITELOG_RECEIVER.COL_FIRMWAREV));
in the location in the method which you can see in  IgsSiteManager.java.  

In 
    org/gsac/gsl/metadata/gnss/GnssEquipment.java is a new variable declaration
    private String receiverFirmware = "";
and two new methods:
    public void setReceiverFirmware(String value) 
and
    public String getReceiverFirmware(String value)
which have one very simple executable line in each method.

The Java file GnssEquipmentGroup.java has two lines for the firmware version:
   outputHandler.msg("Firmware"), 

   equipmentRow(buff, getValue(equipment.getReceiverFirmware(), values, 4),"");
Add similar lines to this same core GSAC Java file for your equipment metadata value.

Equipment parameters may change with every site visit.  The IGS Site Log Manager GSAC which we are using as a template has code to show equipment metadata values for each visit ,in the results in HTML (web page).  This requires a few more lines of code in this method  gsl/metadata/gnss/GnssEquipment.java:   
     String receiverSerial, String receiverFirmware,
          receiverSerial, receiverFirmware, new double[] { 0,
                        String receiverSerial, String receiverFirmware,
        this.receiverFirmware = receiverFirmware;
Look at the class file to see where and how these lines are used.  You add corresponding lines for your equipment.

To add the equipment metadata firmware version to the XML Site Log output format, are these lines in these files:
    org/gsac/gsl/util/XmlSiteLog.java:    
        public static final String TAG_EQUIP_FIRMWAREVERSION =

    org/gsac/gsl/output/site/SiteLogOutputHandler.java:           
        pw.append(XmlUtil.tag(XmlSiteLog.TAG_EQUIP_FIRMWAREVERSION, "",
           equipment.getReceiverFirmware()));

   org/gsac/gsl/output/site/XmlSiteLogOutputHandler.java:                
        pw.append(makeTag(XmlSiteLog.TAG_EQUIP_FIRMWAREVERSION, "",
           equipment.getReceiverFirmware()));

In short, use the IGS IGS Site Log Manager GSAC code to look for every instance of use of the GSAC variable  "COL_FIRMWAREV" and the related code files with "FIRMWAREVERSION" and "Firmware."  

So far we have shown how to get database values about a discovered site, and how to output the value in the results from GSAC.  Here are examples how to include a new metadata parameter, such as for the city name, in the GSAC site query form.  You can duplicate this code for some new kind of field in your database, to allow remote users to query on that field.

For example, in org/igs/gsac/database/Tables.java you need to verify that your database Java representation has the field value you wan to use, such as for IGS the value COL_CITY. and its associated database table class name; in the example there are two tables with this field value, and you need to use SITELOG_LOCATION.

You need new lines like these in the core GSAC code (not IGS site log code):

org/gsac/gsl/GsacExtArgs.java:  
    public static final String ARG_CITY = GsacArgs.ARG_SITE_PREFIX + "city";

In org/gsl/GsacRepository.java, in addToSearchForm() 
add lines like
                buffer.append(HtmlUtil.formEntry("City:",
                  HtmlUtil.input(ARG_CITY,
                  request.get(ARG_CITY, (String) null)));

In org/gsac/gsl/metadata/PoliticalLocationMetadata.java there are several lines  to be duplicated:
   private String city;
   outputHandler.msgLabel("City"), city));

and in addHtml(...) add
     if (city != null) {
            pw.append(outputHandler.formEntry(request,
                    outputHandler.msgLabel("City"), city));
        }

and in this constructor add a new line
    public PoliticalLocationMetadata(String country, String state,
                                     String city) {
        ...
        this.city    = city;

and create two new methods like these:
    public void setCity(String value) {
...
    public String getCity() {... 
which have very simple executable  contents (city = value; and return city;).

In the example IGS code, there are lines to implement a query capability for, and  reading the city name:
   org/igs/gsac/IgsSiteManager.java:   
    values = getDatabaseManager().readDistinctValues
    ( Tables.SITELOG_LOCATION.NAME, Tables.SITELOG_LOCATION.COL_CITY);

    capabilities.add(new Capability(GsacExtArgs.ARG_CITY,    
            "City", values, true, CAPABILITY_GROUP_ADVANCED));

    org/igs/gsac/IgsSiteManager.java   
       String city= results.getString(colCnt++);
    org/igs/gsac/IgsSiteManager.java   
       site.addMetadata(new PoliticalLocationMetadata(country, state, city));





########################################################################
Web Site Design and Images (HTML)
########################################################################

The files footer.html and header.html in the directory @MACRO.SRCDIR@/resources/
specify web page layout and decoration surrounding the GSAC forms and results. They can be as simple as

 header.html:
	<html>
	<head>
	<title>New Repos GSAC Repository</title>
	</head>
	<body>

or fully developed, such as using css.  Image files used on the web site can be put in the new directory, 
@MACRO.SRCDIR@/htdocs/, or they may be retrieved from another web server, for example, with

   <img src="http://cddis.nasa.gov/images/spacer.gif">.

Change the resources/header.html & resources/footer.html to the you HTML want to use for the header and footer.


########################################################################
Building and Running the GSAC server
########################################################################


Once you have made needed additions to the Java code, to build a test version server in @MACRO.SRCDIR@, run
ant (or ant test_build). To build run a production release, run ant production_build.

The build.xml file used by ant is @MACRO.SRCDIR@/build.xml. The ant build targets will copy one 
of the gsacdb (_test or _production) properties files to resources/gsacsb.properties

It will also copy one of the files
   resources/gsacserver_test.properties or 
   resources/gsacserver_production.properties
to resources/gsacserver.properties

The ant target  builds a .zip of a stand-alone gsac server in ~/gsac/sourceforge/gsac/trunk/dist/  
and generates a Tomcat war file  ~/gsac/sourceforge/gsac/trunk/dist/gsacws.war.

To run the server:
ant runserver

For the test server, the screen output from this command shows a URL to use in your local browser 
to see and try the test server web services.



########################################################################
Hiding DB account info
########################################################################

If you have some database authentication you need to use (or any other properties), 
but don't want to check in with the properties files (into SourceForge or other svn), 
you can create a org/@MACRO.PREFIX@/@MACRO.BASENAME@.properties file. The contents are two lines:
gsac.db.username=your-db-account-name
gsac.db.password=your-db-account-password

The ant runserver command implicitely uses this property file as a command line argument.
When running in production the servlet will look for such a properties file under Tomcat/conf/<rootname>.properties
So, for example, for a 'gsacmyrepo' server,  it looks for a gsacmyrepo.properties file. 
Put the authentication information in that properties file so it's not checked into any svn.

For the Unavco GSAC package we have the db auth information in SVN and it gets included in the .war file 


########################################################################
Running the new GSAC web site with Tomcat
########################################################################

Apache Tomcat is a Java servlet container to power web applications. See http://tomcat.apache.org/.

Building GSAC (in the src/org/@MACRO.PREFIX@/gsac directory, run ant) makes a Tomcat .war file in the dist/ folder: 
 ~/gsac/sourceforge/gsac/trunk/dist/gsac@MACRO.PREFIX@.war.  
 
Copy this file to the Tomcat apachetomcatdev/webapps/ folder on your web server host.  
The GSAC server web presence should be immediately available, especially if you are
using "hot deploy," without a restart of Tomcat.

You can see the output by doing for example, tail -f /usr/local/apachetomcatdev/logs/catalina.out

If for some reason tomcat is misbehaving you can do:
sudo /etc/init.d/tomcatdev stop
sudo /etc/init.d/tomcatdev start
to restart tomcat 

The servlet reads the properties file:
/usr/local/apachetomcatdev/conf/gsacigs.properties
which contains the database authentication info, if you chose not to include that in the --- file.
 
########################################################################
Adding Data File Downloads from a GSAC Repository with FTP
########################################################################


########################################################################
Running a Stand-Alone GSAC Web Site
########################################################################


SKW Oct 3 2012
