
########################################################################

Part 2.

How to create a new implementation of the UNAVCO GSAC-WS Web Services suite
to provide web service access to site-located data in a geoscience data repository.

The User Guide, "UNAVCO GSAC WS: Web Services for Geodesy Data Repositories,"
http://facility.unavco.org/data/gsacws/UNAVCO_GSAC_User_Guide.pdf,
lists software tools needed for building GSAC.  
The UNAVCO GSAC WS home page is http://facility.unavco.org/data/gsacws/gsacws.html

This README was generated from the template package (src/org/gsac/template/README)
during the initial package build, from Part 1.

(Some file names in this README file, such as gsac@MACRO.PREFIX@.properties,
 may have one or more upper case letters. The actual files lack upper case. 
 Do not change actual filenames to match the uppercase letter, if any, in the README files.)

########################################################################

This README is found in your new GSAC package.  

This file has the second part of the instructions to build a GSAC server for your data repository 
You should have already followed the Part 1 instructions in src/org/gsac/README.  

Hopefully you've managed to generated the initial repository source package.

Now, change the working directory to @MACRO.SRCDIR@

Do ant there:

ant 

This ant command builds an initial new GSAC server for your repository.  (It also creates a new Tomcat war file, 
something like gsac/sourceforge/gsac/trunk/dist/gsac@MACRO.PREFIX@.war, which may be used, eventually, for your public web site.)  

Now try:

ant runserver

This command runs the new '@MACRO.SRCDIR@' GSAC repository server, on your local system.  
Screen output of the ant command includes a line like

GSAC INFO: Tue Aug 28 14:33:59 EDT 2012: 
GsacServlet: url:http://mycpuname:8080/gsac@MACRO.PREFIX@/gsacapi

In a browser look at that URL, http://mycpuname:8080/gsac@MACRO.PREFIX@/gsacapi.  
You should see a new web page with minimal content, with a line of links like
Search Sites | Search Files | Browse | Infomation | Help

This shows that the GSAC code runs on your system.  This uses Jetty  (see http://www.eclipse.org/jetty/), 
a Java HTTP server and Java servlet container.   The Jetty servlet is for local testing, 
which saves the trouble of a full Tomcat implementation, and avoids restarting Tomcat 
for every test of the new GSAC.  Public operational systems often run with Tomcat in place of Jetty.

Stop the ant runserver process with CTRL-c.   You've generated the GSAC repository source package 
and an initial new GSAC server.

So far you have been bootstrapping a operational GSAC server which has complete core GSAC code 
but which lacks many specific details about your repository.

Now you need to specify important details about your particular repository, such as what 
fields in your database users may search on, and what metadata from your database is provided 
as results from queries of your GSAC services.

Adding Your Repository's Details

########################################################################
Configuration 
########################################################################

The file resources/gsac.properties has a number of properties you can set,
for example, the base url which will be part of the full URL of the website about your GSAC repository.
such as 'gsacws' in the URL of GSAC at CDDIS, http://cddis.gsfc.nasa.gov/gsacws/gsacapi/site/form:

gsac.baseurl = /gsac@MACRO.PREFIX@
or
gsac.baseurl = /gsacws

'gsacapi/' and 'site/form' are always part of a GSAC URL.

Provide a name for your repository:
gsac.repository.name=@MACRO.PREFIX@ GSAC Repository 

and a description 
gsac.repository.description=@MACRO.PREFIX@ geodesy and GNSS Seamless Archive Center Repository

and a maximum size when zipping up files, e.g. 100 MB, in bytes:    
#file.zip.maxsize=100000000 

??? FIX this which is not so:
and the hostname and port for your web server:
gsac.server.hostname=gnssrepo.@MACRO.PREFIX@.org
gsac.port.display=80
endFIX


########################################################################
Database Connection Information
########################################################################

In @MACRO.SRCDIR@/dbresources/, for development change the database properties file gsacdb_test.properties 
(and for final release, also change the file gsacdb_production.properties)
to specify: 
gsac.db.username=db-acct-user-name
gsac.db.password=db-acct-pswd

When the GSL assembles the JDBC URL it also looks up the user name and password to use  to connect to the database.
For the Unavco GSAC package we have the db auth information in SVN and it gets included in the .war file 

Also set this value 
gsac.db.jdbcurl=jdbc:mysql://myrepo.program.org:3306/myrepo_prod

Note that Oracle and Postgres have different syntax for this line.  
For postgres the form is jdbc:postgresql://<hostname>:<port>/<database> 

One Oracle JDBC URL is of the form:
jdbc:oracle:thin:${username}/${password}@<hostname>:<port>:<database>, e.g:
jdbc:oracle:thin:${username}/${password}@db1.ap.int.program.org:1521:gpsdb


And to name your database driver
gsac.db.driverclass=com.mysql.jdbc.Driver  

Other possible choices for this line are 
gsac.db.driverclass=oracle.jdbc.driver.OracleDriver  
(see http://www.oracle.com/technetwork/database/features/jdbc/index-091264.html) 
and a Postgres driver (see http://jdbc.postgresql.org/).


Both the gsacdb_(test,production).properties files may be exactly the same, or may differ 
if you use different databases for development and production.


########################################################################
Server Connection Information
########################################################################

You may put the hostname and port of your web server in the gsacserver_(test,production).properties
files:
# Server info
#gsac.server.hostname=
#gsac.server.port=9090   

The hostname is optional.  The port defaults to port 8080 for when running stand-alone,
or you can define it in this properties file.

########################################################################
Reading Your Database: Making Tables.java
########################################################################

GSAC has to be able to identify the tables and columns (fields) in your database,
which will be used in database queries generated by the GSAC web form searches, and by incoming requests of the GSAC API.
There is a nice utility to generate a Java class (Tables) that holds all of your
database table names and columns (fields) in the tables.  This allows you to not have String table and column
names permeate your code.

To generate the Tables.java source code file, after you have a connection set up to the database, in @MACRO.SRCDIR@, 
run

ant tables   

Screen output from a successful run should include lines like these, showing names of tables in your database:

tables:
     [java] processing AGENCY
     [java] processing COUNTRIES
     [java] processing EQUIPMENT
     ...

This process will read your database and make a new file @MACRO.SRCDIR@/database/Tables.java. 
The Java code defines classes with methods, such as the next code block for a table about GPS recievers, 
with methods getName() which gives the table name, and getColumns() which returns names for fields 
in that table about GPS receivers, and which defines new String variables.

     public static class STATION_IDENTIFICATION extends Tables {
        public static final String NAME = "Station_Identification";
        public String getName() {return NAME;}
        public String getColumns() {return COLUMNS;}
        public static final String COL_MARKERNAME =  NAME + ".MarkerName";
        public static final String ORA_MARKERNAME =  "MarkerName";
        public static final String COL_MARKERNUMBER = NAME + ".MarkerNumber";
        public static final String ORA_MARKERNUMBER = "MarkerNumber";
        public static final String COL_LATITUDE =  NAME + ".Latitude";
        public static final String ORA_LATITUDE =  "Latitude";
        public static final String COL_LONGITUDE =  NAME + ".Longitude";
        public static final String ORA_LONGITUDE =  "Longitude";
        public static final String COL_CITY =  NAME + ".City";
        public static final String ORA_CITY =  "City";
        public static final String COL_COUNTRY =  NAME + ".Country";
        public static final String ORA_COUNTRY =  "Country";
        public static final String[] ARRAY = new String[] {
            COL_MARKERNAME,COL_MARKERNUMBER,COL_LATITUDE,COL_LONGITUDE,COL_CITY,COL_COUNTRY,COL_PROPOSITIONDATE,COL_COMMITMENTLETTER,COL_CONSISTENT_RINEX_FILES,COL_INDIVIDUALCALIBRATION,COL_DATAQUALITY,COL_DENSIFICATIONSITE,COL_COLLOCATEDINSTRUMENT,COL_INTERESTEDANALYSISCENTRES,COL_HOURLY_DATA,COL_ECGN_DATA,COL_MAINDATACENTRE,COL_TIDEGAUGE,COL_REMARK
        };
        public static final String COLUMNS = SqlUtil.comma(ARRAY);
        public static final String NODOT_COLUMNS = SqlUtil.commaNoDot(ARRAY);
    public static final STATION_IDENTIFICATION table  = new  		STATION_IDENTIFICATION();
    };

The ant table command builds the corresponding Table* class files in @MACRO.SRCDIR@/database/.


########################################################################
Extending Java Classes  (was Code changes)
########################################################################

The @MACRO.PREFIX@Repository is the main entry point. It mostly creates the @MACRO.PREFIX@SiteManager 
and/or @MACRO.PREFIX@FileManager objects.

Files in @MACRO.SRCDIR@ have the Java code for your repository.   The Java file @MACRO.PREFIX@Repository.java is the main entry point, where you add much of the code for the new repository.   Also the files @MACRO.PREFIX@SiteManager.java and @MACRO.PREFIX@sFileManager.javafiles will be changed to implement database queries used by your GSAC web form searches and by the GSAC API.  See the lines in the Java classes in those files marked with CHANGEME in the comments, for what needs to be changed. 

For a more detailed description of adding to the GSAC Java files, see the GSAC-WS brocheur available at
http://facility.unavco.org/data/gsacws/gsacws.html, in the Extending Java Classes section.  You may also review code in other 
GSAC implementations checked into SourceForge, such as the file org/igs/gsac/IgsSiteManager.java.

Add to these files:

IgsRepository.java 

Above the import lines, add the new Java package name, in this form:
package org.@MACRO.PREFIX@.gsac; 

In the method initResourceManagers(),  uncomment 
     super.initResourceManagers();

to search on both sites and data files in the database.  (See other code in that method if you need to only search on only sites or only files: getResourceManager(GsacSite.CLASS_SITE) and getResourceManager(GsacFile.CLASS_FILE).)


IgsFileManager.java 

This class has 3 'changeme' sections:

doGetQueryCapabilities()

handleRequest(

getResource(


IgsSiteManager.java  

This class has 5 'changeme' sections...

doGetQueryCapabilities() - defines things to search on

handleRequest

getResource

Default query order"

makeResource

and also a change in getResourceSelectColumns()


########################################################################
Web Site Design and Images (HTML)
########################################################################

The files footer.html and header.html in the directory @MACRO.SRCDIR@/resources/
specify web page layout and decoration surrounding the GSAC forms and results. They can be as simple as

 header.html:
	<html>
	<head>
	<title>New Repos GSAC Repository</title>
	</head>
	<body>

or fully developed, such as using css.  Image files used on the web site can be put in the new directory, 
@MACRO.SRCDIR@/htdocs/, or they may be retrieved from another web server, for example, with

   <img src="http://cddis.nasa.gov/images/spacer.gif">.

Change the resources/header.html & resources/footer.html to the you HTML want to use for the header and footer.


########################################################################
Building and Running the GSAC server
########################################################################


Once you have made needed additions to the Java code, to build a test version server in @MACRO.SRCDIR@, run
ant (or ant test_build). To build run a production release, run ant production_build.

The build.xml file used by ant is @MACRO.SRCDIR@/build.xml. The ant build targets will copy one 
of the gsacdb (_test or _production) properties files to resources/gsacsb.properties

It will also copy one of the files
   resources/gsacserver_test.properties or 
   resources/gsacserver_production.properties
to resources/gsacserver.properties

The ant target  builds a .zip of a stand-alone gsac server in ~/gsac/sourceforge/gsac/trunk/dist/  
and generates a Tomcat war file  ~/gsac/sourceforge/gsac/trunk/dist/gsacws.war.

To run the server:
ant runserver

For the test server, the screen output from this command shows a URL to use in your local browser 
to see and try the test server web services.



########################################################################
Hiding DB account info
########################################################################

If you have some database authentication you need to use (or any other properties), 
but don't want to check in with the properties files (into SourceForge or other svn), 
you can create a org/@MACRO.PREFIX@/@MACRO.BASENAME@.properties file. The contents are two lines:
gsac.db.username=your-db-account-name
gsac.db.password=your-db-account-password

The ant runserver command implicitely uses this property file as a command line argument.
When running in production the servlet will look for such a properties file under Tomcat/conf/<rootname>.properties
So, for example, for a 'gsacmyrepo' server,  it looks for a gsacmyrepo.properties file. 
Put the authentication information in that properties file so it's not checked into any svn.

For the Unavco GSAC package we have the db auth information in SVN and it gets included in the .war file 


########################################################################
Running the new GSAC web site with Tomcat
########################################################################

Apache Tomcat is a Java servlet container to power web applications. See http://tomcat.apache.org/.

Building GSAC (in the src/org/@MACRO.PREFIX@/gsac directory, run ant) makes a Tomcat .war file in the dist/ folder: 
 ~/gsac/sourceforge/gsac/trunk/dist/gsac@MACRO.PREFIX@.war.  
 
Copy this file to the Tomcat apachetomcatdev/webapps/ folder on your web server host.  
The GSAC server web presence should be immediately available, especially if you are
using "hot deploy," without a restart of Tomcat.

You can see the output by doing for example, tail -f /usr/local/apachetomcatdev/logs/catalina.out

If for some reason tomcat is misbehaving you can do:
sudo /etc/init.d/tomcatdev stop
sudo /etc/init.d/tomcatdev start
to restart tomcat 

The servlet reads the properties file:
/usr/local/apachetomcatdev/conf/gsacigs.properties
which contains the database authentication info, if you chose not to include that in the --- file.
 
########################################################################
Adding Data File Downloads from a GSAC Repository with FTP
########################################################################


########################################################################
Running a Stand-Alone GSAC Web Site
########################################################################


SKW Oct 3 2012
