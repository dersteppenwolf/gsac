####g###################################################################

GSAC_WS Installation     

README, Part 2.

This file describes how to complete your new gsac@MACRO.PREFIX@ GSAC-WS Web Services suite,
to provide web service access to site-located data in a geoscience data repository.

You should have first read and followed the installation instructions in
the "Installing GSAC-WS" section in the report "UNAVCO GSAC WS: Web Services for Geodesy Data Repositories"               
(http://facility.unavco.org/data/gsacws/docs/UNAVCO_GSAC_Web_services.pdf),
and in the README Part 1 file in the main GSAC code area, trunk/src/org/gsac/.

This README, Part 2, was generated from the template package during your initial package build, 
as described in README Part 1.

Some file names in this README file, such as gsac@MACRO.PREFIX@.properties,
may have one or more upper case letters. The cooresponding actual GSAC files lack upper case in their names. 
Do not change actual filenames to match uppercase letters if any such are shown in this README file.

########################################################################

This README file is found in your new GSAC package in @MACRO.SRCDIR@/.
(ignore the README file in  @MACRO.SRCDIR@/release.)

Hopefully you've managed to generate the initial repository source package using README Part 1.

Now, change the working directory to your local GSAC code area, at @MACRO.SRCDIR@ 


   Adding Your Repository's Details

   Base URL and Names or Titles: The "GSAC Resources Properties" File.

The file @MACRO.SRCDIR@/resources/gsac.properties has a number of properties about your GSAC installation (not the database), for example, 
gsac.baseurl is the part of the URL, the full URL of the website for your GSAC repository.

Some values were created in the initial ant build you did already.

    An example, a file myrepo/gsac/resources/gsac.properties might have: 

    #
    #This gets read by the base GsacRepository class for defining properties
    #This allows you to override the default GSAC server properties defined in
    #org/gsac/gsl/resources/gsac.properties
    #
    gsac.baseurl = /gsacmyrepo
    #Your repository name
    gsac.repository.name=My repo GSAC Repository
    #Your repository description
    gsac.repository.description=The My repo GSAC Repository 

Change the items for your GSAC repository.

You optionally may add another new line with a maximum size when zipping up files, e.g. 100 MB, in bytes:

    file.zip.maxsize=100000000

An example of gsac.baseurl is 'gsacws' in the URL of GSAC at CDDIS, http://cddis.gsfc.nasa.gov/gsacws/gsacapi/site/form.
(The terms 'gsacapi/site/form' are always part of a GSAC URL (in the site search) and you do not enter them anywhere.)
Or this baseurl may include an acronym for identification of your agency.

The items repository.name and repository.description are used as labels on the web site.



Setting and Hiding DB account information: the "GSAC DB Properties" File.

You fill the file, @MACRO.SRCDIR@/dbresources/gsacdb_test.properties, to hold the database account details,
to permit the GSAC web server process to read from the geodesy database.  The contents are like:

gsac.db.username=db-gsac-username
gsac.db.password=db-gsac-password
gsac.db.jdbcurl=jdbc:mysql://myrepodev.mydomain.org:3080/myrepodb

The database host (like myrepodev.mydomain.org), port (3080), account user name and account password are all given here.  The database must have such an account.
When the GSL assembles the JDBC URL it finds the user name and password from here, to read from the database.

Note that Oracle and Postgres have different syntax for the last line in this file.  For postgres the form is 
=jdbc:postgresql://<hostname>:<port>/<database>.  

One Oracle JDBC URL is of the form:
=jdbc:oracle:thin:${username}/${password}@<hostname>:<port>:<database>, 
e.g:
=jdbc:oracle:thin:${username}/${password}@db1.ap.int.program.org:1521:gpsdb

Also copy @MACRO.SRCDIR@/dbresources/gsacdb_test.properties to @MACRO.SRCDIR@/dbresources/gsacdb_production.properties.

[For those with GSAC sourceForge write access:
Caution: Do not check this code into a public software repository, such as GSAC with svn, since it has private database account information.
Do not do 'svn add' or 'svn commit' this file to the GSAC SourceForge repository!]

Everytime you do "ant" to build your repository  the file @MACRO.SRCDIR@/dbresources/gsacdb_test.properties is copied to the file
@MACRO.SRCDIR@/resources/gsacdb.properties, and @MACRO.SRCDIR@/resources/gsacserver_test.properties
is copied to @MACRO.SRCDIR@/resources/gsacserver.properties. Can be confusing if you attempt to keep track of the several properties files.


Your local build.xml file.

The file build.xml, in your location @MACRO.SRCDIR@, should have these lines. Note the gsqc@MACRO.PREFIX@ : 

    <target name="localinit">
        <!-- base name for build products -->
        <property name="basename" value="gsac@MACRO.PREFIX@"/>

This target will be used by ant build process to make your GSAC server.


You have specified the basic information needed to run your full GSAC server.


Do the command ant in @MACRO.SRCDIR@:

ant 

This ant command builds the complete GSAC server for your repository.  (It also creates a new Tomcat war file, 
something like gsac/sourceforge/gsac/trunk/dist/gsacmyrepo.war, which will be used eventually for your public web site,
if you use Tomcat.)  

If the ant commands succeeds you will see output to the screen including 

compile:
    [javac] Compiling 7 source files
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
gsacjar:
     [echo] Making jar /home/wier/gsac/sourceforge/gsac/trunk/dist/gsacigs1.0.jar
     [jar] Building jar: /home/wier/gsac/sourceforge/gsac/trunk/dist/gsacigs1.0.jar
and including
war:
     [copy] Copying 1 file to /home/wier/gsac/sourceforge/gsac/trunk/dist
   [delete] Deleting: /home/wier/gsac/sourceforge/gsac/trunk/dist/gsacigs1.0/servlet-api.jar
      [war] Building war: /home/wier/gsac/sourceforge/gsac/trunk/dist/gsacigs.war
     [echo] ********************************
     [echo] To run the server run:
     [echo] ant runserver
     [echo] ********************************
BUILD SUCCESSFUL
Total time: 8 seconds

The source Java (.java) files compiled are like these:
in @MACRO.SRCDIR@:
-rw-r--r-- 1 wier wier  1623 2013-03-04 10:13 MyrepoRepository.class
-rw-r--r-- 1 wier wier  3962 2013-03-04 10:13 MyrepoFileManager.class
-rw-r--r-- 1 wier wier  1408 2013-03-04 10:13 MyrepoServer.class
-rw-r--r-- 1 wier wier  3444 2013-03-04 10:13 MyrepoTest.class
-rw-r--r-- 1 wier wier  1355 2013-03-04 10:13 MyrepoDatabaseManager.class
-rw-r--r-- 1 wier wier 17399 2013-03-04 10:13 MyrepoSiteManager.class


Now run this command in @MACRO.SRCDIR@:

ant tables

Output from the ant tables command includes lines like:

tables:
     [java] JVM args ignored when same JVM is used.
...
     [java] processing AGENCY
     [java] processing EQUIPMENT
     [java] processing INSTRUMENTATION
     [java] processing RECEIVER

each line  corresponding to the name of table in your database.

This should make the file @MACRO.SRCDIR@/database/Tables.java

If the Tables.java files is in @MACRO.SRCDIR@/ (not in @MACRO.SRCDIR@/database/) move it to @MACRO.SRCDIR@/database/.
You may need to first make the @MACRO.SRCDIR@/database subdirectory with command 

mkdir database

The package name in Tables.java (at or near line 3) should be 
package org.ring.gsac.database;
not
package org.ring.gsac;
If this is not the case, edit the Tables.java file to fix it.

Now run

ant

(yes, again).

This time you should see 

compile:
    [javac] Compiling 7 source files
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
and
BUILD SUCCESSFUL
Total time: 5 seconds
 
This time ant compiles the six java file in @MACRO.SRCDIR@/, and also compiles the new Tables.java in @MACRO.SRCDIR@/database/.
Look for the new Tables*.class files in @MACRO.SRCDIR@/database/.


Now you can  run an initial (but incomplete) test version of your new GSAC web server with:

ant runserver

This command runs an intial gsac@MACRO.PREFIX@ GSAC repository server, on your local desktop where you are developing your GSAC.  
Screen output of this ant command includes a line like

GSAC INFO: Tue Aug 28 14:33:59 EDT 2012: GsacServlet: url:http://mycpuname:8080/gsac@MACRO.PREFIX@/gsacapi

In a browser on your desktop where you are developing your GSAC, look at that URL, 
something like http://mycpuname:8080/gsac@MACRO.PREFIX@/gsacapi.  
You should (!) see a new web page with minimal content:

      Welcome to the GSAC Repository
      Search Sites | Search Files | Browse | Infomation | Help

This shows that the GSAC code runs on your system.  

(This new web site uses Jetty (see http://www.eclipse.org/jetty/), 
a Java HTTP server and Java servlet container.  The Jetty servlet is for local testing, 
which saves the trouble of deploying a .war file to a Tomcat implementation, and avoids restarting Tomcat 
for every test of the new GSAC.  Public web servers often run with Tomcat in place of Jetty.)

You've generated the core GSAC repository source package (code or software) and an initial new GSAC server.

You can look at basic GSAC server web site pages, such as in the Information and Help links.

Stop the 'ant runserver' process with CTRL-c.  

So far you have been bootstrapping a operational GSAC server which has complete core GSAC code 
but which lacks specific details about your repository.

Now you need to specify important details about your particular repository.


########################################################################

Using Your Database by means of the Tables.java

GSAC must identify the tables and columns (fields) in your database,
which will be used in database queries generated by the GSAC web form searches, and by incoming requests of the GSAC API.
The Java class (in the file called Tables.java) holds all of the database table names and the tables' column (field) names.  

The Java class Tables has methods, such as the next code block for a table about GPS receivers, 
with methods getName() which gives the table name, and getColumns() which returns names for fields 
in that table about GPS receivers, and which defines new String variables.

     public static class STATION_IDENTIFICATION extends Tables {
        public static final String NAME = "Station_Identification";
        public String getName() {return NAME;}
        public String getColumns() {return COLUMNS;}
        public static final String COL_MARKERNAME =  NAME + ".MarkerName";
        public static final String ORA_MARKERNAME =  "MarkerName";
        public static final String COL_MARKERNUMBER = NAME + ".MarkerNumber";
        public static final String ORA_MARKERNUMBER = "MarkerNumber";
        public static final String COL_LATITUDE =  NAME + ".Latitude";
        public static final String ORA_LATITUDE =  "Latitude";
        public static final String COL_LONGITUDE =  NAME + ".Longitude";
        public static final String ORA_LONGITUDE =  "Longitude";
        public static final String COL_CITY =  NAME + ".City";
        public static final String ORA_CITY =  "City";
        public static final String COL_COUNTRY =  NAME + ".Country";
        public static final String ORA_COUNTRY =  "Country";
        public static final String[] ARRAY = new String[] {
            COL_MARKERNAME,COL_MARKERNUMBER,COL_LATITUDE,COL_LONGITUDE,COL_CITY,COL_COUNTRY,COL_PROPOSITIONDATE,COL_COMMITMENTLETTER,COL_CONSISTENT_RINEX_FILES,COL_INDIVIDUALCALIBRATION,COL_DATAQUALITY,COL_DENSIFICATIONSITE,COL_COLLOCATEDINSTRUMENT,COL_INTERESTEDANALYSISCENTRES,COL_HOURLY_DATA,COL_ECGN_DATA,COL_MAINDATACENTRE,COL_TIDEGAUGE,COL_REMARK
        };
        public static final String COLUMNS = SqlUtil.comma(ARRAY);
        public static final String NODOT_COLUMNS = SqlUtil.commaNoDot(ARRAY);
    public static final STATION_IDENTIFICATION table  = new  		STATION_IDENTIFICATION();
    };

You will recognize the correspondence between your database's specific table names, such as Station Identification, and your field names, such as latitude,
with the names GSAC uses internally, in Tables.java, such as STATION_IDENTIFICATION.COL_LATITUDE.  

DB table and filed (column) names from Tables.java will be used in new methods needed to implement your GSAC server, described below.


########################################################################
GSAC's Format Choices for Query Results
########################################################################

GSAC offers several choices for formats of the results of queries.  For example, on any GSAC web site, 
either open the Information page's Output types list - click on [+] - or in a Search form, open the Results [+] area
and then the Output: menu.

GSAC now offers results in these formats:

HTML                    output=site.html (for the GSAC web pages of results)
XML Site Log (SOPAC)    output=site.xmllog
SINEX                   output=site.snx
GAMIT station.info      output=site.station.info
GSAC Plain text         output=site.plaintext
GSAC Full Site CSV      output=site.csv.full
GSAC Short Site CSV     output=site.csv
GSAC Site ATOM          output=site.gsacatom
GSAC Site JSON          output=site.json
GSAC Site RSS           output=site.gsacrss
Google Earth KML        output=site.kml
Google Earth KMZ        output=site.kmz

(The terms output=... are the result format arguments in GSAC API queries.)

GSAC offers both a short csv (comma separated value) file formats with only 
site name and location, and a full csv file with lots of geodesy site data.
The GSAC plain text format is for quick visual inspection of the site values 
available (not intended for computer processing).

If you are satisfied with your GSAC repository offering these formats, 
you need do nothing about output format choices. Go to the next topic.

The choices of what to show in GSAC are set in the file trunk/src/org/gsac/gsl/SiteManager.java. 

You may very easily NOT offer some formats.  Comment out lines for handlers NOT wanted your GSAC-WS repository.
For example if you do not want to provide the GSAC "Short csv" format, comment out (put // before) 
new TextSiteLogOutputHandler(getRepository(), getResourceClas())
in the file trunk/src/org/gsac/gsl/SiteManager.java. 
However you are encouraged to allow all the GSAC format choices, to show consistent results with other GSACs and in Federated GSAC collections.
There is no harm in offering all the choices, even if you do not see much use in some format.

To conform with other GSAC repositories we ask you not to revise any GSAC-supplied format.  You are very welcome to make a new similar but altered 
handler .java class for your use.  Add its call to the class file SiteManager.java and rebuild GSAC.  Do not commit your core 
GSAC code changes in thsi case into GSAC without consulting UNAVCO.

For bug reports and suggested improvements about formats please contact UNAVCO.

The output handler code for the GSAC format choices, HTML, SOPAC XML site log,
SINEX, GAMIT station.info, GSAC FULL csv format, and the GSAC Plain Text format, 
will handle the "standard parameters" in a "conforming GSAC geodesy implementation."

Please do *not*  do svn commit for any modified SiteManager.java file into SourceForge.

GSAC does not endorse file formats.  If there is a format which you think GSAC should 
offer, you can contact UNAVCO to add it to GSAC code.  Or you can create a new "OutputHandler" Java class yourself and submit it to UNAVCO to add to GSAC.
You create a new kind of format by writing a new Java class, similar to any of the above output handlers, such as HtmlSiteOutputHandler.  
The Java output handler source files are in trunk/src/org/gsac/gsl/output/site/.  You can use the current output handler classes as
guides to what is needed in a similar Java class.  


########################################################################
Extending Java Classes (Java Code changes)
########################################################################

The @MACRO.PREFIX@Repository class is the main entry point. It mostly creates the @MACRO.PREFIX@SiteManager 
and other @MACRO.PREFIX@---Manager.java (for example for the UNAVCO IGS GSAC, in  src/org/igs/gsac/, 
the files IgsFileManager.java, IgsRepository.java, IgsServer.java, and IgsSiteManager.java).

Files in @MACRO.SRCDIR@/ have the Java code for your repository.   The Java file @MACRO.PREFIX@Repository.java is the main entry point, 
where you add much of the code for the new repository.   Also the files @MACRO.PREFIX@SiteManager.java and 
@MACRO.PREFIX@sFileManager.java must be extended to implement database queries used by your GSAC web form searches 
and by the GSAC API.  See the lines in those Java files marked with CHANGEME for what needs to be changed. 

For a more detailed description of adding to the GSAC Java files, you may review code in other 
GSAC implementations checked into SourceForge, such as the file org/igs/gsac/IgsSiteManager.java.

Chnage or add to these files:

        ########################################################################

@MACRO.PREFIX@Repository.java 

Above the import lines, add the new Java package name, in this form:
package org.@MACRO.PREFIX@.gsac; 

In the method initResourceManagers(),  uncomment 
     super.initResourceManagers();
to search on both sites and data files in the database.  

If you wish  to only search  only for sites or only for files, use either the calls getResourceManager(GsacSite.CLASS_SITE) 
or getResourceManager(GsacFile.CLASS_FILE).


        ########################################################################

@MACRO.PREFIX@FileManager.java 

Above the import lines, add the new Java package name, in this form:
package org.@MACRO.PREFIX@.gsac;

This class has 3 'changeme' sections:

doGetQueryCapabilities()

handleRequest()

getResource()


        ########################################################################

@MACRO.PREFIX@SiteManager.java  

Above the import lines, add the new Java package name, in this form:
package org.@MACRO.PREFIX@.gsac;

This class has 5 'changeme' sections...

doGetQueryCapabilities() - defines things to search on

handleRequest

getResource

Default query order"

makeResource

and also a change in getResourceSelectColumns().


########################################################################

Adding the GSAC local Java classes (.java files).


GSAC core code provides a few common data values, such as latitude of a site.  For your GSAC you probably need to use additional values from your database for data searches or results.

These examples are from code for the IGS Site Log Manager implementation of GSAC.  Since you have downloaded the GSAC code from SourceForge, you already have these files to look at.  The ISG GSAC code was checked into SourceForge as part of the GSAC.

GSAC uses a consistent capitalization style to identify classes in Tables.java (from the database table names) and field names, in other Java files, Java variables and Java methods.  We strongly urge you to follow this convention to aid code readability and maintenance.

To demonstrate how to add a new field's value from your database to the HTML (web page) results, here is the code for a database value called frequency standard, which in this database indicates the kind of clock used by a GNSS receiver.  

The database used by GSCA is represented in Java by the file org/igs/gsac/database/Tables.java.  In that file there is a Java class for a db table called SITELOG_FREQUENCYSTANDARD, with a db field variable String COL_STANDARDTYPE.  You use these Java variables to write the new code.  Do not modify the IGS GSAC file Tables.java; it was created when the IGS GSAC template was built.  

You look in your file  Tables.java to find the Java names for items you want to use from your database.
In Tables.java, find the class in your db table, and the field in it you want to use, such as
this representation of your db and its table which has a field for something called frequency standard:

 public static class SITELOG_FREQUENCYSTANDARD extends Tables {
        public static final String NAME = "SiteLog_FrequencyStandard";
        public String getName() {return NAME;}
        public String getColumns() {return COLUMNS;}
        public static final String COL_ID =  NAME + ".ID";
        public static final String COL_STANDARDTYPE =  NAME + ".StandardType";
        ....

From this material, you can construct the full GSAC internal name for the value needed, such as Tables.SITELOG_FREQUENCYSTANDARD.COL_STANDARDTYPE


In the file trunk/org/gsac/gsl/GsacExtArgs.java, add a new line to declare the internal variable name GSAc will use, like
    public static final String SITE_METADATA_FREQUENCYSTANDARD = "site.metadata.frequencystandard"; 
This declares a new Java variable to hold the value extracted from the database for a GPS receiver station or site.
DO this for each new type to value to handle.


To the file  like MyRepoSiteManager.java in trunk/org/myrepo/gsac/, add a method like private void readFrequencyStandardMetadata(GsacResource gsacResource)
which has in part
 addPropertyMetadata( gsacResource, GsacExtArgs.SITE_METADATA_FREQUENCYSTANDARD,
                    "Clock", results.getString( Tables.SITELOG_FREQUENCYSTANDARD.COL_STANDARDTYPE));

note this has:
the GSAC variable GsacExtArgs.SITE_METADATA_FREQUENCYSTANDARD,
a label ("Clock" in this case) for the HTML output page for a query, and
a way (results.getString() ) to get the desired value from the db, using the full GSAC internal name for the Tables.java object.

Example of the complete method (from the IGS GSAC file, IgsSiteManager.java):
    /**
     * from db table represented in Tables.java as class SITELOG_FREQUENCYSTANDARD,
     * get the value of String COL_STANDARDTYPE and add it (with the label "clock") to the GsacResource object "gsacResource".
     * in this case the site is recognized in the db with the getDatabaseManager().select() call.
     *
     * SITE_METADATA_FREQUENCYSTANDARD must be declared in  GsacExtArgs.java.
     *
     * @param gsacResource  the GSAC resource object to add the value to.
     *
     * @throws Exception _more_
     */
    private void readFrequencyStandardMetadata(GsacResource gsacResource)
            throws Exception {
        // compose db query statement; 'order by' phrase is null.
        Statement statement =
            getDatabaseManager().select(
                Tables.SITELOG_FREQUENCYSTANDARD.COLUMNS,
                Tables.SITELOG_FREQUENCYSTANDARD.NAME,
                Clause.eq(
                    Tables.SITELOG_FREQUENCYSTANDARD.COL_FOURID,
                    gsacResource.getId()), (String) null, -1);
        ResultSet results;
        try {
            // do db query
            SqlUtil.Iterator iter =
                getDatabaseManager().getIterator(statement);
            // process each line in results of db query; the GsacExtArgs item must have been added to GsacExtArgs.java.
            while ((results = iter.getNext()) != null) {
                addPropertyMetadata(
                    gsacResource, GsacExtArgs.SITE_METADATA_FREQUENCYSTANDARD,
                    "Clock",
                    results.getString(Tables.SITELOG_FREQUENCYSTANDARD.COL_STANDARDTYPE));
                break;
            }
        } finally {
            getDatabaseManager().closeAndReleaseConnection(statement);
        }
   }

This reads the frequency standard value from the database.  The term "Clock" is a label for search results in the HTML web page of results.

Then in the same Java file, add to the method 
    public GsacSite makeResource(ResultSet results)
the call to the new method:
  readFrequencyStandardMetadata(site); 
before the return statement.

This method makeResource() loads  the results from a query.

Build the new GSAC, in this case with "ant" in trunk/org/myrepo/gsac/.  Then test your changes with "ant runserver."

This finds the frequency standard value at a site.

To add the value to other GSAC output result formats, see the "...OutputHandler.java" files in trunk/org/gsac/gsl/output/site/.


########################################################################

Implementing Equipment data 


Data items which pertain to equipment (such as GNSS receivers and related instruments) have a special Java class
    org/gsac/gsl/metadata/gnss/GnssEquipmentGroup.java.  
Let's see how to add an equipment value to GSAC output.  

We will again refer to core GSAC code, and examples of code in the IGS Site Log Manager GSAC.  Use this code as a template for writing new code about your equipment metadata.

An example from the IGS GSAC:
In org/igs/gsac/database/Tables.java there is a Java class, representing a database table, called SITELOG_RECEIVER, with a variable String COL__FIRMWAREV, for the database's field holding the firmware version. You use these Java variables to write new code.  (Do not modify Tables.java) 

In the method  
    private void readEquipmentMetadata(GsacResource gsacResource) in org/igs/gsac/IgsSiteManager.java
is one line:
    equipment.setReceiverFirmware(results.getString(Tables.SITELOG_RECEIVER.COL_FIRMWAREV));
in the location in the method which you can see in  IgsSiteManager.java.  

In 
    org/gsac/gsl/metadata/gnss/GnssEquipment.java is a new variable declaration
    private String receiverFirmware = "";
and two new methods:
    public void setReceiverFirmware(String value) 
and
    public String getReceiverFirmware(String value)
which have one very simple executable line in each method.

The Java file GnssEquipmentGroup.java has two lines for the firmware version:
   outputHandler.msg("Firmware"), 

   equipmentRow(buff, getValue(equipment.getReceiverFirmware(), values, 4),"");
Add similar lines to this same core GSAC Java file for your equipment metadata value.

Equipment parameters may change with every site visit.  The IGS Site Log Manager GSAC which we are using as a template has code to show equipment metadata values for each visit ,in the results in HTML (web page).  This requires a few more lines of code in this method  gsl/metadata/gnss/GnssEquipment.java:   
     String receiverSerial, String receiverFirmware,
          receiverSerial, receiverFirmware, new double[] { 0,
                        String receiverSerial, String receiverFirmware,
        this.receiverFirmware = receiverFirmware;
Look at the class file to see where and how these lines are used.  You add corresponding lines for your equipment.

To add the equipment metadata firmware version to the XML Site Log output format, are these lines in these files:
    org/gsac/gsl/util/XmlSiteLog.java:    
        public static final String TAG_EQUIP_FIRMWAREVERSION =

    org/gsac/gsl/output/site/SiteLogOutputHandler.java:           
        pw.append(XmlUtil.tag(XmlSiteLog.TAG_EQUIP_FIRMWAREVERSION, "",
           equipment.getReceiverFirmware()));

   org/gsac/gsl/output/site/XmlSiteLogOutputHandler.java:                
        pw.append(makeTag(XmlSiteLog.TAG_EQUIP_FIRMWAREVERSION, "",
           equipment.getReceiverFirmware()));

In short, use the IGS IGS Site Log Manager GSAC code to look for every instance of use of the GSAC variable  "COL_FIRMWAREV" and the related code files with "FIRMWAREVERSION" and "Firmware."  

So far we have shown how to get database values about a discovered site, and how to output the value in the results from GSAC.  Here are examples how to include a new metadata parameter, such as for the city name, in the GSAC site query form.  You can duplicate this code for some new kind of field in your database, to allow remote users to query on that field.

For example, in org/igs/gsac/database/Tables.java you need to verify that your database Java representation has the field value you wan to use, such as for IGS the value COL_CITY. and its associated database table class name; in the example there are two tables with this field value, and you need to use SITELOG_LOCATION.

You need new lines like these in the core GSAC code (not IGS site log code):

org/gsac/gsl/GsacExtArgs.java:  
    public static final String ARG_CITY = GsacArgs.ARG_SITE_PREFIX + "city";

In org/gsl/GsacRepository.java, in addToSearchForm() 
add lines like
                buffer.append(HtmlUtil.formEntry("City:",
                  HtmlUtil.input(ARG_CITY,
                  request.get(ARG_CITY, (String) null)));

In org/gsac/gsl/metadata/PoliticalLocationMetadata.java there are several lines  to be duplicated:
   private String city;
   outputHandler.msgLabel("City"), city));

and in addHtml(...) add
     if (city != null) {
            pw.append(outputHandler.formEntry(request,
                    outputHandler.msgLabel("City"), city));
        }

and in this constructor add a new line
    public PoliticalLocationMetadata(String country, String state,
                                     String city) {
        ...
        this.city    = city;

and create two new methods like these:
    public void setCity(String value) {
...
    public String getCity() {... 
which have very simple executable  contents (city = value; and return city;).

In the example IGS code, there are lines to implement a query capability for, and  reading the city name:
   org/igs/gsac/IgsSiteManager.java:   
    values = getDatabaseManager().readDistinctValues
    ( Tables.SITELOG_LOCATION.NAME, Tables.SITELOG_LOCATION.COL_CITY);

    capabilities.add(new Capability(GsacExtArgs.ARG_CITY,    
            "City", values, true, CAPABILITY_GROUP_ADVANCED));

    org/igs/gsac/IgsSiteManager.java   
       String city= results.getString(colCnt++);
    org/igs/gsac/IgsSiteManager.java   
       site.addMetadata(new PoliticalLocationMetadata(country, state, city));


########################################################################
Web Site Page Design, Contents, and Images 
########################################################################

Installing  GSAC initially creates a short version of this page which says only "Welcome to GSAC." 
You can add more to this file for a larger page, using normal HTML.

The home page of a GSAC repository web site is detailed in a file such as src/org/@MACRO.PREFIX@/htdocs/index.html
In your GSAC code area, mkdir to create htdocs/ in @MACRO.PREFIX@/gsac/ (src/org/@MACRO.PREFIX@/htdocs/)
In @MACRO.PREFIX@/gsac/htdocs make a new HTML file index.html. A very simple but working one has these three lines:

<link rel="search" type="application/opensearchdescription+xml" href="htdocs/opensearch.xml" 
title=" @MACRO.PREFIX@ GSAC Repository" />
This is the @MACRO.PREFIX@ GPS Repository

Put image files used on the web main page  in the new directory, @MACRO.SRCDIR@/htdocs/.
In your index.html file, the image is added like <img src="gsacMyrepo/gsacapi/htdocs/Myimage.jpg">
As usual in HTML, images  may be retrieved from another web server, for example, with
<img src="http://cddis.nasa.gov/images/gps_satellite.gif">.

Note that these pages do not have complete <html>  lines( inclusing <html> and more at the beginning, or the final </hmtl>), since these pages
are wrapped inside the GSAC header and footer HTML files, mentioned next.

The files footer.html and header.html, in the directory @MACRO.SRCDIR@/resources/, specify the top and bottom of the 
GSAC web pages at your locations, and provide web page layout and decoration surrounding  the GSAC forms and results. 
These files may be as simple as

 header.html:
	<html>
	<head>
	<title>New Repos GSAC Repository</title>
	</head>
	<body>

or fully developed, such as using css.  

Change the files resources/header.html and resources/footer.html to give the HTML appearance for the header and footer
of all your web pages.  You may use these files to supply your standard agency's web site look to your GSAC repository web site.

The GSAC query pages with the search web forms, and pages with static GSCA information such as the help pages,
are complete and provided by GSAC installation, and use the same header and footer HTML files.  Is it possible to modify the search forms 
with extensive Java programming, but we urge you to write to UNAVCO if you see need for a change.  For consitency with
other GSAC repositories, and for problem-free operation in a federated GSAC, it is best not to modify core GSAC code.


########################################################################
Building and Running the GSAC server
########################################################################

Once you have made the additions to the Java code, to build your GSAC, in @MACRO.SRCDIR@, run
simply:

 ant 


The ant target builds a .zip of a stand-alone gsac server in ~/gsac/sourceforge/gsac/trunk/dist/  
and generates a Tomcat war file  ~/gsac/sourceforge/gsac/trunk/dist/gsac@MACRO.PREFIX@.war.

To run the server, do:

 ant runserver

This will run a test or demo version of your GSAC on your desktop, with Jetty doing the web page management.

To see the new GSAC, in the runserver screen output  is a line such as

     [java] GSAC INFO: Wed Dec 12 10:18:46 MST 2012: GsacServlet: url:http:/hostname:8080/gsacmyrepo/gsacapi

Enter the "http:/hostname:8080/gsacmyrepo/gsacapi" part in a browser URL address window on the same machine to
see your new GSAC.


########################################################################
Hiding DB account info
########################################################################

If you have some database authentication you need to use (or any other properties), 
but don't want to check in with the properties files (into SourceForge or other svn), 
you can create a org/@MACRO.PREFIX@/@MACRO.BASENAME@.properties file. The contents are two lines:
gsac.db.username=your-db-account-name
gsac.db.password=your-db-account-password

The ant runserver command implicitely uses this property file as a command line argument.
When running in production the servlet will look for such a properties file under Tomcat/conf/<rootname>.properties
So, for example, for a 'gsacmyrepo' server,  it looks for a gsacmyrepo.properties file. 
Put the authentication information in that properties file so it's not checked into any svn.

For the Unavco GSAC package we have the db auth information in SVN and it gets included in the .war file 


########################################################################
Running the new GSAC web site with Tomcat
########################################################################

Apache Tomcat is a Java servlet container to power web applications. See http://tomcat.apache.org/.

Building GSAC (in the src/org/@MACRO.PREFIX@/gsac directory, run ant) makes a Tomcat .war file in the dist/ folder: 
 trunk/dist/gsac@MACRO.PREFIX@.war.  
 
Copy this file to the Tomcat apachetomcatdev/webapps/ folder on your web server host.  
For example, on the Tomcat server, do something like
cp gsac@MACRO.PREFIX@.war /usr/local/apachetomcatdev/webapps

The GSAC server web should be available in a few seconds, if you are using "hot deploy," without a restart of Tomcat.

You can see the log of Tomcat actions by doing for example,
 tail -f /usr/local/apachetomcatdev/logs/catalina.out

If for some reason Tomcat and hotdeploy is misbehaving, or to restart Tomcat, you can do:
sudo /etc/init.d/tomcatdev stop
sudo /etc/init.d/tomcatdev start
to restart tomcat 

The Tomcat's servlet reads the properties file:
/usr/local/apachetomcatdev/conf/gsacigs.properties
which contains the database authentication info.
 
########################################################################
Adding Data File Downloads from a GSAC Repository with FTP
########################################################################

If you enable files searches, and your db has a complete URL specifying FTP for each data file,
GSAC will return the FTP URLS, and a wget statement with the FTP URLs, as results from a file and site search.

If your database does not have a field with the complete URL specifying FTP for each data file, you may bre able 
to construct the complete URL specifying FTP for each data file, with extra Java coding, using parts of the URL
such as data file name, which you can find in results from GSAC queries.


28 Feb. 2013
SKW 
