/*
 * Copyright 2010 UNAVCO, 6350 Nautilus Drive, Boulder, CO 80301
 * http://www.unavco.org
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 */

package org.gsac.gsl.output.site;


import org.gsac.gsl.*;
import org.gsac.gsl.model.*;
import org.gsac.gsl.output.*;

import org.gsac.gsl.metadata.*;
import org.gsac.gsl.metadata.gnss.*;


import ucar.unidata.util.StringUtil;

import java.io.*;


import java.util.ArrayList;
import java.util.List;

import javax.servlet.*;
import javax.servlet.http.*;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;


/**
 * Class specifies output format stationinfo, the GAMIT station.info format, and names the internal GSAC Java items OUTPUT_SITE_STATIONINFO, "site.stationinfo"
 * This version has csv formatting code in handleresult () which needs to be rewritten to write GAMIT station.info format.
 * typical station.info file:

*          Gamit station.info
*
*          Generated by SOPAC on 18-Nov-2012 @ 23:00:08 UTC
*          Send questions, comments or concerns to devel@gpsmail.ucsd.edu
*
*SITE  Station Name      Session Start      Session Stop       Ant Ht   HtCod  Ant N    Ant E    Receiver Type         Vers                  SwVer  Receiver SN           Antenna Type     Dome   Antenna SN
 0001  GEONET0001        2011 060 00 00 00  9999 999 00 00 00   0.0000  DHBGP   0.0000   0.0000  TRIMBLE NETR9         Nav 4.17 Sig 0.00      4.17  --------------------  TRM29659.00      GSI    --------------------

 PALM  Palmer Station,   1997 113 00 00 00  1998 189 00 00 00   0.0794  DHPAB   0.0000   0.0000  --------------------  --------------------  -----  --------------------  ASH700936D_M     SCIS   CR14107
 PALM  Palmer Station,   1998 189 00 00 00  2008 068 00 00 00   0.0794  DHPAB   0.0000   0.0000  ASHTECH Z-XII3        1E95                   8.25  RS00178               ASH700936D_M     SCIS   CR14107
 PALM  Palmer Station,   2008 068 00 00 00  2009 090 16 30 00   0.0794  DHPAB   0.0000   0.0000  ASHTECH UZ-12         CQ00                  -----  ZR520021801           ASH700936D_M     SCIS   CR14107
 PALM  Palmer Station,   2009 090 16 30 00  9999 999 00 00 00   0.0794  DHPAB   0.0000   0.0000  ASHTECH UZ-12         CQ00                  -----  UC2200436003          ASH700936D_M     SCIS   CR14107
 
 STAV  Stavanger         1998 160 14 41 00  1998 160 17 20 00   5.5590  DHPAB  -0.0020  -0.0050  TRIMBLE 4000SSI       7.03                   7.03  3511A10121            TRM29659.00      SCIS   0220098659
 STAV  Stavanger         1998 160 17 20 00  9999 999 00 00 00   5.5590  DHPAB  -0.0020  -0.0050  TRIMBLE 4000SSI       7.28                   7.28  3511A10121            TRM29659.00      SCIS   0220098659

 * possible gsac vars for the above
[this is for station rPOLAM so note same values as in sopac station.info table sample jsut above.
gnssReceiver>
<equip:receiverType>ASHTECH UZ-12</equip:receiverType>
<equip:serialNumber>ZR520021801</equip:serialNumber>
<equip:firmwareVersion>CQ00</equip:firmwareVersion>
<equip:dateInstalled>2008-03-08T00:00:00 -0700</equip:dateInstalled>
<equip:dateRemoved>2009-03-30T00:00:00 -0600</equip:dateRemoved>

<gnssAntenna>
<equip:antennaType>ASH700936D_M</equip:antennaType>
<equip:serialNumber>CR14107</equip:serialNumber>
<equip:marker-arpUpEcc.>0.0794</equip:marker-arpUpEcc.>
<equip:marker-arpNorthEcc.>0</equip:marker-arpNorthEcc.>
<equip:marker-arpEastEcc.>0</equip:marker-arpEastEcc.>
<equip:alignmentFromTrueNorth/>
<equip:antennaRadomeType>SCIS</equip:antennaRadomeType>
<equip:radomeSerialNumber/>
<equip:dateInstalled>1997-04-23T00:00:00 -0600</equip:dateInstalled>
<equip:dateRemoved/>                                                          no date removed means 'still installed and in use', I bet, or "9999...00 00"   in station.info style.

 *
 * @version     Nov 21, 2012  
 * @author      SKW
 */
public class StationInfoSiteOutputHandler extends GsacOutputHandler {

    /** output id */
    public static final String OUTPUT_SITE_STATIONINFO = "site.stationinfo";

    /** date formatter */ /* FIX need day of year not 0dd */
    private SimpleDateFormat gamitdateTimeFormat =
        new SimpleDateFormat("yyyy 0dd HH mm ss");

    /**
     * _more_
     *
     * @param date _more_
     *
     * @return _more_
     */
    private String myFormatDateTime(Date date) {
        if (date == null) {
            return "yyyy ddd HH mm ss";
        }
        synchronized (gamitdateTimeFormat) {
            return gamitdateTimeFormat.format(date);
        }
    }


    /**
     * _more_
     *
     * @param gsacRepository _more_
     * @param resourceClass _more_
     */
    public StationInfoSiteOutputHandler(GsacRepository gsacRepository,
                                 ResourceClass resourceClass) {
        super(gsacRepository, resourceClass);
        getRepository().addOutput(getResourceClass(),
                                  new GsacOutput(this, OUTPUT_SITE_STATIONINFO,
                                      "GAMIT station.info", "/sites.stationinfo", true));
                                    // "Site station.info" is a label for the Results choice box in site search form on web page.
                                    // the sites.stationinfo is used for names of files of results.   
    }


    /**
     *  compose the station.info formatted result
     *
     * @param request The request
     * @param response The response
     *
     * @throws IOException On badness
     * @throws ServletException On badness
     */
    public void handleResult(GsacRequest request, GsacResponse response)
            throws IOException, ServletException, Exception  {
        response.startResponse(GsacResponse.MIME_CSV);
        PrintWriter  pw          = response.getPrintWriter();
        String       delimiter   = (request.defined(ARG_DELIMITER)
                                    ? request.get(ARG_DELIMITER, " ")
                                    : "  ");
        String       paramString = request.get(ARG_PARAMS, (String) null);

        List<String> params      = ((paramString == null)
                                    ? new ArrayList<String>()
                                    : StringUtil.split(paramString, ",", true,
                                        true));
        if (params.size() == 0) {
            params.add(ARG_SITE_ID);
            params.add(ARG_SITE_CODE);
            params.add(ARG_SITE_NAME);
            params.add(ARG_SITE_LATITUDE);
            params.add(ARG_SITE_LONGITUDE);
            params.add(ARG_SITE_ELEVATION);
        }
        try {
            int colCnt = 0;
            /* header lines */
            /* station.info header style: */
            pw.print("*          GAMIT station.info \n");
            pw.print("*                             \n");
            pw.print("*          Generated by the NNN GSAC repository on date and time                   \n");
            pw.print("*                             \n");
            pw.print("*SITE  Station Name      Session Start      Session Stop       Ant Ht   HtCod  Ant N    Ant E    Receiver Type         Vers                  SwVer  Receiver SN           Antenna Type     Dome   Antenna SN \n");

            /* csv file header style:
            for (String param : params) {
                if (colCnt > 0) {
                    pw.print(",");
                } else {
                    pw.print("#");
                }
                colCnt++;
                pw.print(param);
            }
            pw.print("\n");
            */

            //     template for values in draft csv format:       pw.print("#repositoryid, site code, name, latitude, longitude, elevation\n");
            int siteCnt = 0;
            for (GsacSite site : response.getSites()) {
                siteCnt++;
                colCnt = 0;
                for (String param : params) {
                    if (0 == colCnt ) {
                        pw.print(" ");
                    }
                    colCnt++;
                    /* site.getShortName appears to be the same as ARG_SITE_ID)
                    if (param.equals(ARG_SITE_CODE)) {
                        pw.print("sn="+site.getShortName());
                        pw.print(delimiter);
                    }  else   
                    */
                    /*  ARG_SITE_NAME is a long name like "Palmer Station, Antarctica"; but station.info format limits it to 16 chars. */
                    if (param.equals(ARG_SITE_NAME)) {
                        String lnStr = site.getLongName();
                        pw.print(lnStr.substring(0,16));
                        pw.print(delimiter);
                    } 
                    /* next must be first in order */
                    else if (param.equals(ARG_SITE_ID)) {
                        String id = site.getId();
                        if (getRepository().isRemoteResource(site)) {
                            String[] pair =
                                getRepository().decodeRemoteId(id);
                            id = pair[0] + ":" + pair[1];
                        }
                        pw.print(id);
                        pw.print(delimiter);
                    } 


                }


                /* this time valu null at test PALm station data
                Date date = site.getFromDate();
                if (date != null) {
                        pw.print( myFormatDateTime(date) );
                        pw.print(delimiter);
                }
                else {  // for test only
                        pw.print("1997 113 00 00 00" );
                        pw.print(delimiter);
                } */
                   
                /* this adds more to the line */
                addSiteEquipment(pw, site);

                /* add line return at end of line with all parms for a site */
                pw.print("\n");
            }

        } finally {
            response.endResponse();
        }
    }



    /**
     * add equipment details to the line in the station.info file about a site 
     *
     * @param pw _more_
     * @param site _more_
     *
     * @throws Exception _more_
    */
    private void addSiteEquipment(PrintWriter pw, GsacSite site)
            throws Exception {
        List<GsacMetadata> equipmentMetadata =
            site.findMetadata(
                new GsacMetadata.ClassMetadataFinder(GnssEquipment.class));

        String delimiter  = "  ";

        for (GsacMetadata metadata : equipmentMetadata) {
            GnssEquipment equipment = (GnssEquipment) metadata;
            if (equipment.hasReceiver()) {
                /* pw.append(makeTag(XmlSiteLog.TAG_EQUIP_RECEIVERTYPE, "",
                                  equipment.getReceiver()));
                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_SERIALNUMBER, "",
                                  equipment.getReceiverSerial()));
                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_FIRMWAREVERSION, "",
                                  equipment.getReceiverFirmware()));
                */
                pw.print( myFormatDateTime(equipment.getFromDate()) );
                pw.print(delimiter);
                pw.print( myFormatDateTime(equipment.getToDate())   );
                pw.print(delimiter);

                /*pw.append(
                    makeTag(
                        XmlSiteLog.TAG_EQUIP_ELEVATIONCUTOFFSETTING, "", ""));
                pw.append(
                    makeTag(
                        XmlSiteLog.TAG_EQUIP_TEMPERATURESTABILIZATION, "",
                        ""));
                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_NOTES, "", ""));
                pw.append(XmlUtil.closeTag(XmlSiteLog.TAG_GNSSRECEIVER));
                */
            }
            /*
            if (equipment.hasAntenna()) {
                pw.append(XmlUtil.openTag(XmlSiteLog.TAG_GNSSANTENNA));

                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_ANTENNATYPE, "",
                                  getNonNullString(equipment.getAntenna())));
                pw.append(
                    makeTag(
                        XmlSiteLog.TAG_EQUIP_SERIALNUMBER, "",
                        getNonNullString(equipment.getAntennaSerial())));

                double[] xyz = equipment.getXyzOffset();
                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_MARKER_ARPUPECC, "",
                                  offsetFormat.format(xyz[2])));
                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_MARKER_ARPNORTHECC,
                                  "", offsetFormat.format(xyz[1])));
                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_MARKER_ARPEASTECC, "",
                                  offsetFormat.format(xyz[0])));
                pw.append(
                    makeTag(
                        XmlSiteLog.TAG_EQUIP_ALIGNMENTFROMTRUENORTH, "", ""));

                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_ANTENNARADOMETYPE, "",
                                  getNonNullString(equipment.getDome())));
                pw.append(
                    makeTag(
                        XmlSiteLog.TAG_EQUIP_RADOMESERIALNUMBER, "",
                        getNonNullString(equipment.getDomeSerial())));

                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_ANTENNACABLETYPE, "",
                                  ""));
                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_ANTENNACABLELENGTH,
                                  "", ""));

                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_DATEINSTALLED, "",
                                  myFormatDateTime(equipment.getFromDate())));
                pw.append(makeTag(XmlSiteLog.TAG_EQUIP_DATEREMOVED, "",
                                  myFormatDateTime(equipment.getToDate())));
                pw.append(XmlUtil.closeTag(XmlSiteLog.TAG_GNSSANTENNA));
            }
            */
        }
    }


}
