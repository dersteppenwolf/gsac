/*
 * Copyright 2013 UNAVCO, 6350 Nautilus Drive, Boulder, CO 80301
 * http://www.unavco.org
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 */

package org.gsac.gsl.output.file;



import org.gsac.gsl.*;
import org.gsac.gsl.model.*;
import org.gsac.gsl.output.*;
import org.gsac.gsl.util.*;

import java.io.*;


import java.util.List;
import java.util.Date;
import java.text.SimpleDateFormat;

import javax.servlet.*;
import javax.servlet.http.*;


/**
 * Class description
 *
 *
 * @version        Enter version here..., Wed, May 19, '10
 * @author         Enter your name here...
 * @author         SK Wier Nov 15, 2013  add new useful items: start and stop time of data to aid download choices
 */
public class CsvFileOutputHandler extends StreamingOutputHandler {

    /** output id */
    public static final String OUTPUT_FILE_CSV = "file.csv";

    private SimpleDateFormat dateTimeFormatnoT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");

    /**
     * _more_
     *
     * @param gsacRepository _more_
     * @param resourceClass _more_
     */
    public CsvFileOutputHandler(GsacRepository gsacRepository,
                                ResourceClass resourceClass) {
        super(gsacRepository, resourceClass);
        getRepository().addOutput(getResourceClass(),
                                  new GsacOutput(this, OUTPUT_FILE_CSV,
                                      "File CSV", "/files.csv", true));
    }


    /**
     * _more_
     *
     * @param response The response
     * @param resource _more_
     */
    public void processResource(GsacResponse response,
                                GsacResource resource) {
        try {
            GsacFile file = (GsacFile) resource;
            FileInfo fi   = file.getFileInfo();
            //Its OK to do this every time because the response keeps track if it has started already
            boolean firstTime = !response.getHaveInitialized();
            response.startResponse(GsacResponse.MIME_CSV);

            PrintWriter pw = response.getPrintWriter();
            if (firstTime) {
                // old original pw.print("#Id, Type, Md5, FileSize, PublishDate, Url\n");
                // LOOK might be useful to add item site_4char_Id[type='string'],
                // new 2 lines:
                pw.print("#fields=db_id_number[type='string'],Data_Type[type='string'],MD5[type='string'],FileSize,PublishDate[type='date'],URL[type='string'],dataStartTime[type='date' format='yyyy-MM-dd HH:mm:ss'],dataStopTime[type='date' format='yyyy-MM-dd HH:mm:ss'],sampleInterval\n");
                pw.append(  "#   Generated by "+ getRepository().getRepositoryName()  + " on "+ myFormatDateTime(new Date()) + " \n");
            }
            String id = file.getId();
            if (getRepository().isRemoteResource(file)) {
                String[] pair = getRepository().decodeRemoteId(id);
                id = pair[0] + ":" + pair[1];
            }
            pw.print(id + ",");

            
            pw.print(file.getType().getLabel() + ",");
            pw.print(fi.getMd5() + ",");
            pw.print(fi.getFileSize() + ",");
            //pw.print(file.getPublishDate() + ",");

            // new: Note the publish date does not include mm:ss and is NOT in ISO 8601 format but we will leave it the old way in case of legacy users out there.  SKW 18 Nov 2103.
            Date date = file.getPublishDate();
            SimpleDateFormat sdf = makeDateFormat("yyyy-MM-dd HH:mm:ss");  // wherefor ssz? 
            pw.print( sdf.format(date) + "," );

            // old and never used it appears:
            //List<GsacResource> relatedResources = file.getRelatedResources();
            //if (relatedResources.size() == 1) {
            //    pw.print(relatedResources.get(0).getId());
            // } else {
            //    
            // } 

            // original show URL with end of line return \n
            //pw.print(fi.getUrl().replace("\\s+$", "") + "\n");
            // new 18 Nov  without end of line return since no longer at end of line \n
            pw.print  (fi.getUrl().replace("\\s+$", "") + "");

            // all new 18 Nov
            Date startTime   = resource.getFromDate();
            Date endTime     = resource.getToDate();
            // LOOK gets nuuls from unavco gsac server; file info has no times set there...    System.out.println("   file csv handler processResource(): From "+startTime+" To "+endTime);
            String start = " ";
            String end = " ";
            SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            if (startTime != null) {
                start = sdfDate.format(startTime);
                //System.out.println("                                     : start "+start);
                pw.print  ("," + start);
             }
            else {
                pw.print  ("," );  // add , at end of previous value even if missing to complete cvs formatting.
            }
            if (endTime != null) {
                end = sdfDate.format(endTime);
                //System.out.println("                                     : end "+end);
                pw.print  ("," + end);
             }
            else {
                pw.print  ("," ); // add , at end of previous value even if missing to complete cvs formatting.
            }

            // value at end of line:
            if ( fi.getSampleInterval() > 0) {
                     pw.print( "," +  (""+ fi.getSampleInterval()) ); 
             } else {
                pw.print  (","  );
             }

            // end all new; add end of line return \n:
            pw.print("\n");

        } catch (Exception exc) {
            throw new RuntimeException(exc);
        }
    }

    /**
     * _more_
     *
     * @param date _more_
     *
     * @return _more_
     */
    private String myFormatDateTime(Date date) {
        if (date == null) { return ""; }
        synchronized (dateTimeFormatnoT) {
            return dateTimeFormatnoT.format(date);
        }
    }

}
