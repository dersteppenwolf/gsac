/*
 * Copyright 2015 UNAVCO, 6350 Nautilus Drive, Boulder, CO 80301
 * http://www.unavco.org
 *
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or (at
 * your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
 * General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation,
 * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 */

package org.gsac.gsl.output.file;

import org.gsac.gsl.*;
import org.gsac.gsl.model.*;
import org.gsac.gsl.output.*;
import org.gsac.gsl.util.*;

import java.io.*;

import java.util.List;
import java.util.Date;
import java.text.SimpleDateFormat;

import javax.servlet.*;
import javax.servlet.http.*;


/**
 * Class description
 *
 *
 * @version        Enter version here..., Wed, May 19, '10
 * @author         Jeff McWhirter 2010
 * @author         modified by SK Wier: UNAVCO 2 Feb 2014; 5 Feb 2015; 13 Apr 2015.  9 Nov 2015 extended second header line.
 */
public class CsvFileOutputHandler extends StreamingOutputHandler {

    /** output id */
    public static final String OUTPUT_FILE_CSV = "file.csv";

    private SimpleDateFormat dateTimeFormatnoT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss Z");

    /**
     * _more_
     *
     * @param gsacRepository _more_
     * @param resourceClass _more_
     */
    public CsvFileOutputHandler(GsacRepository gsacRepository,
                                ResourceClass resourceClass) {
        super(gsacRepository, resourceClass);
        getRepository().addOutput(getResourceClass(),
                                  new GsacOutput(this, OUTPUT_FILE_CSV,
                                      "File CSV", "/files.csv", true));
    }


    /**
     * _more_
     *
     * @param response The response
     * @param resource _more_
     */
    public void processResource(GsacResponse response,
                                GsacResource resource) {
        try {
            //System.out.println("   begin file csv handler processResource(): " );

            GsacFile file     = (GsacFile) resource;
            FileInfo fiinfo   = file.getFileInfo();
            //Its OK to do this every time because the response keeps track if it has started already
            boolean firstTime = !response.getHaveInitialized();
            response.startResponse(GsacResponse.MIME_CSV);

            // write three header lines, in 'unavco standard csv format'
            PrintWriter pw = response.getPrintWriter();
            if (firstTime) {
                pw.print("#fields=site_4char_ID[type='string'],Data_Type[type='string'],MD5[type='string'],FileSize[unit='byte'],"+
                   "PublishDate[type='date' format='yyyy-MM-dd HH:mm:ss'],URL[type='string'],dataStartTime[type='date' format='yyyy-MM-dd HH:mm:ss'],"+
                   "dataStopTime[type='date' format='yyyy-MM-dd HH:mm:ss'],sampleInterval[unit='s']\n");
                //pw.append(  "#   Comma-separated value list of instrumental data or product files from an archive with UNAVCO GSAC web services.  Missing metadata values have nothing between commas. \n");
                //pw.append(  "#   Generated by "+ getRepository().getRepositoryName()  + " on "+ myFormatDateTime(new Date()) + " \n");
                pw.append(  "#   Comma-separated value list of instrumental data or product files from an archive with UNAVCO GSAC web services. Generated by "+ getRepository().getRepositoryName()  + " on "+ myFormatDateTime(new Date()) + " \n");
                pw.append("# ID             name                    MD5 check sum                    size   publish date        URL                                                             start time        end time           delta T \n");
            }
 
            String id = file.getId();
            //System.out.println("   file csv handler processResource(): file.getId ="+id+"_" );

            // get the 4 character site code, and the site name in some cases
            String stationid = "";
            String sitename =""; 
            if (id.length() == 4) {
                stationid = id;
            }
            else
            {
                List<GsacResource> relatedResources = file.getRelatedResources();
                if (relatedResources.size() == 1) {
                    sitename= relatedResources.get(0).getLongName();
                    stationid = relatedResources.get(0).getId();
                    // extract the actual 4 character site code from this thing, such as ABMF from 23477_ABMF_5649_
                    int i1=0;
                    int i2=stationid.length();
                    if (i2>4) {
                      i1= stationid.indexOf('_')+1;
                      i2=i1+4;
                      stationid= stationid.substring(i1,i2); 
                    }
                    //System.out.println("   file csv handler processResource(): data file stationid="+stationid) ; //+"_   station name=+"+sitename+"_" );
                } 
            }
            pw.print(stationid + ",");
            
            String dtype = file.getType().getLabel();
            dtype = dtype.replaceAll(",", " ");  // remove commas from data type names; a comma in a name busts the csf file formatting.
            if (dtype.length() >0) {
               pw.print( dtype + ",");
               //System.out.println("   file csv handler processResource(): data type="+dtype+"_" );
            }
            else {
               pw.print(",");
            }

            if ( fiinfo.getMd5().length() >0) {
               pw.print(fiinfo.getMd5() + ",");
               //System.out.println("   file csv handler processResource(): got md5"+fiinfo.getMd5() );
            }
            else {
               pw.print(",");
            }

            if ( fiinfo.getFileSize() >0 ) { // returns a long not a string
               pw.print(fiinfo.getFileSize() + ",");
               //System.out.println("   file csv handler processResource(): got size"  + fiinfo.getFileSize());
            }
            else {
               pw.print(",");
            }

            //pw.print(file.getPublishDate() + ",");
            Date date = file.getPublishDate();
            if ( date != null ) {
                SimpleDateFormat sdf = makeDateFormat("yyyy-MM-dd HH:mm:ss");  
                String pubdate = sdf.format(date);
                if (pubdate.length() == 10) {
                   pubdate += " 00:00:00";
                }
                if ( pubdate.length() >0) {
                   pw.print( pubdate + "," );
                   //System.out.println("   file csv handler processResource(): pubdate ="+pubdate+"_" );
                }
                //pw.print( sdf.format(date) + "," );
            }
            else {
                   pw.print(",");
            }

            if ( fiinfo.getUrl().length() >0) {
               pw.print  (fiinfo.getUrl().replace("\\s+$", "") + "");
               //System.out.println("   file csv handler processResource(): file url ="+fiinfo.getUrl()+"_" );
            }
            else {
               pw.print(",");
            }

            String start = " ";
            String end = " ";
            Date startTime   = resource.getFromDate();
            Date endTime     = resource.getToDate();
            //if (startTime != null ) 
            // { System.out.println("   file csv handler processResource(): date times are "+startTime.toString()+" To "+endTime.toString() ); }
            //else {  System.out.println("   startTime is NULL"); }

            SimpleDateFormat sdfDate = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            if (startTime != null) {
                start = sdfDate.format(startTime);
                //System.out.println("  sdf start "+start);
                pw.print  ("," + start);
             }
            else {
                pw.print  ("," );  // add , at end of previous value even if missing to complete cvs formatting.
            }
            if (endTime != null) {
                end = sdfDate.format(endTime);
                //System.out.println("  sdf   end "+end);
                pw.print  ("," + end);
             }
            else {
                pw.print  ("," ); // add , at end of previous value even if missing to complete cvs formatting.
            }

            // find and add sample interval:
            // fixed bug 13 APr 2015
            float sif = fiinfo.getSampleInterval();
            //System.out.println("   file csv handler processResource(): samp interval ="+sif );
            String asif = ""+sif;
            if ( sif >0.0f) {
                     //System.out.println("   file csv handler processResource():  add  ,"+asif+"," );
                     pw.print( "," + asif +"," ); 
             } else {
                pw.print  (",,");
             }

            /*   OMIT this happens if the input fileinfo oject has a GsacSite for the relatedResource, as in the UNAVCO GSAC
            if ( sitename != "" && sitename.length() >=1 ) {
                pw.print  ("," + sitename);
                System.out.println("     site name ="+sitename);
            }
            */
  
            // add end of line return \n:
            pw.print("\n");

        } catch (Exception exc) {
            throw new RuntimeException(exc);
        }
    }


    /**
     * _more_
     *
     * @param date _more_
     *
     * @return _more_
     */
    private String myFormatDateTime(Date date) {
        if (date == null) { return ""; }
        synchronized (dateTimeFormatnoT) {
            return dateTimeFormatnoT.format(date);
        }
    }

}
