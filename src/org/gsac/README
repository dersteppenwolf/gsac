
################################################################################

How to create a new implementation of the UNAVCO GSAC-WS Web Services suite
to provide web service access to site-located data in a geoscience data repository.

Part 1.

The User Guide, "UNAVCO GSAC WS: Web Services for Geodesy Data Repositories,"
http://facility.unavco.org/data/gsacws/UNAVCO_GSAC_User_Guide.pdf,
lists software tools needed for building GSAC.  

The UNAVCO GSAC WS home page is http://facility.unavco.org/data/gsacws/gsacws.html

This is the README file from  gsac/trunk/src/org/gsac/ and is the first of two
README files detailing GSAC installation.

################################################################################

Building a GSAC server for your data repository.

You should have done the following already:

Make a working area, for example:
mkdir ~/gsac/sourceforge/

Check out the GSAC code from SourceForge, using subversion:
cd ~/gsac/sourceforge/
svn co https://gsac.svn.sourceforge.net/svnroot/gsac gsac

Do the initial build with ant:
cd gsac/trunk/ 
ant 

This ant command builds the basic GSAC code, including the GSL (the GSAC service layer), and a GSAC server.  
ant uses the build.xml in the directory where ant is run.

################################################################################

From gsac/trunk/: 
cd src/org/gsac/

What's in trunk/src/org/gsac/:
 
build.xml: used by ant 

gsl/: This is the core GSAC Service Layer implementation

client/: Java based client for accessing a GSAC repository

ramadda/: The RAMADDA GSAC plugin, for the RAMADDA content management system (see )

federated/: This is the implemention of the federated repository

package.html:

template/:  see next:

################################################################################
Generating Your Initial GSAC-WS repository package
################################################################################

The template directory (org/gsac/template/) holds a template of an initial GSAC repository package 
implementation. This allows you to generate a package with all of the boilerplate Java code and build scripts.

What you need to do is define a set of macro values that are used to take the code in the 
template package and make an initial Java package.

Copy the example template/macros.properties file to your own file, e.g.:

cd template/
cp macros.properties   myrepomacros.properties

'myrepo' is only a placeholder here.  Replace myrepo with a name for your project or repository. 

Edit the myrepomacros.properties file to define the target package name, directory, etc. 
For example, edit the following lines.  

##Name of the repository
target.name=myrepo GSAC Repository

##This is used to create the jar and war release files
target.basename=gsacmyrepo

##target package name
target.package=org.myrepo.gsac

##All of the java classes will have this prefix as the first part of their names
target.prefix=Myrepo

# What database driver jar file do we use? (This gets added to the generated build.xml to include the right jar file.)
target.dbdriver=mysql.jar

Other choices for the db driver are postgres.jar and oracleDriver.jar.


Then run this ant command in org/gsac/:

ant -propertyfile myrepomacros.properties makerepository

This will copy all of the source and resource files templates, replacing the macros with
the values you defined in myrepomacros.properties and place them in the specified new target directory,
such as org/myrepo/.  The template file org/gsac/template/README is copied to your new package, for example, 
to org/myrepo/gsac/README, and it has the next set of instructions.  Note that the myrepomacros.properties file 
is only used this one time.

Now, the hard part.  You need to actually implement all the details for your repository. 

See Part 2 of GSAC implementation, the second and final README file, in the newly generated package, 
such as org/myrepo/gsac/README.

################################################################################
