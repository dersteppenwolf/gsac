################################################################################

                           GSAC Installation

   README, Part 1.  Creating an initial GSAC server at your Data Center 

                  14 Mar. 2014.  Stuart Wier, UNAVCO

UNAVCO's GSAC is a package of code for web services. With GSAC a geodesy or geophysics data center can quickly offer a set of complete, 
consistent, modern web services for remote users to query the data center about stations and instruments, and download data files make by the instruments, 
and product files such as plots.  The UNAVCO GSAC home page is at http://facility.unavco.org/data/gsacws/gsacws.html. 

This README file describes the first steps in GSAC installation, and is the first, Part 1, of two README files detailing GSAC installation.  This file is found 
in gsac-code/src/org/gsac/ in the GSAC package available from SourceForge, as described below.

These instructions apply both to installing GSAC services for a data repository, and to installing a Federated GSAC which merges GSAC services from several 
sepearate data repository GSACs.

To install a Federated GSAC, use all the sections in this README file, except the section "Begin to make GSAC, adapted for your data repository."

The instructions a hypothetical "Boulder" agency and data repository, running a GPS network called "BoulderNet." You will use you own names for these.

Time Formats

GSAC tries to use all date and time values in the ISO 8601 format, like "yyyy-MM-dd HH:mm:ss", to avoid the complexities and error-prone behavior of using several different formats.
Date and time values in the ISO 8601 format as character strings may be easily entered into and extracted from databases as databases' native datetime objects.
Date and time values in the ISO 8601 format as character strings may be easily converted into Java Date objects with
   Date dateobj = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").parse(timeString);

GSAC treats all time values as UTC times, and does not expect the optional Z or time zone hour number in an ISO 8601 value.  
GSAC does not expect times in the database to be in any time zone other than UTC.  You may if you wish enter such times but that is discouraged.

################################################################################

Installing GSAC Web Services -- System Requirements

You can install GSAC web services for a data repository when you have:

    a database, with complete metadata about sites (stations or monuments), their instruments, and their data files (if any). See more details in A Database for GSAC, below. You can use an existing database you have, with no changes to it, but new Java code for GSAC code must be written to read the database, which requires some use of the GSAC core classes. Or you can make a new database using the GSAC prototype database schema as described below, populating it with your data values, which allows you to use GSAC code with few changes.

    A web server for GSAC web pages. Running GSAC with the Tomcat application server is common, but Tomcat is optional. GSAC can use its own included application server, Jetty.

    To offer data file downloads, GNSS data files from the instruments, for remote users to download. GSAC can provide discovery and download of geodesy data files like RINEX files. This is optional.

    To offer data file downloads, an FTP / HTTP download server for the data files. GSAC itself can run on a different web server from the server(s) for downloads, a benefit. (GSAC does not download files; GSAC tells users how and where to download files, a URL for the FTP/HTTP server and the file.)

    A Linux system (see below for details) for the initial installation and test of GSAC, with related software tools bash, Java JDK 1.6 or 1.7, subversion ("svn"), and ant, and with access to your GSAC database.
    the GSAC software package provided by UNAVCO. GSAC is free and open source code in the GSAC package from SourceForge.

    About Linux Systems

        GSAC uses standard Linux operating system features and utilities. Your Linux will need the utilities ant, bash, svn, and Java development support. 
        GSAC experience is not yet extensive enough to recommend one OS, or to discourage use of any. GSAC has been installed on Debian, Ubuntu, Mac OS, and Free BSD. UNAVCO will test GSAC on CentOS in early 2014.

        About Debian, Ubuntu, CentOS, and Fedora

        A typical Linux system for GSAC operations could use Debian, with the bash shell. Debian with bash has simple installation of the software tools you need using apt-get. 
        Ubuntu, Fedora, and CentOS Linux are similar, but Debian is recommended for stable and secure operations.

        Java JDK, version 1.6 or 1.7. Most Linux Os-s come with a Java JDK which probably will be OK for GSAC builds. Try commands "java -version" and "javac - version" to see your Java versions.

        To install ant, do command sudo apt-get install ant

        To install subversion ("svn"), do command sudo apt-get install subversion

        If you elect to use MySQL, versions 5.1 to 5.6 are know to work. Do the command sudo apt-get install mysql-server This requests you to enter 
        the "root" password, which is a new root password for MySQL, not your Linux system root password.


        About Mac OS
        On a MacBook Air, this configuration works:
            Mac OS X Ver 10.9.1 (Mavericks)
            5.6.14 MySQL Server Version
            JDK 7 Update 09 (build 1.7.0_09-b05)
            svn, version 1.8.5 (r1542147)
            ant, Apache Ant version 1.9.3 (version 1.8.1 fails)
                setenv JAVA_HOME /Library/Java/JavaVirtualMachines/jdk1.7.0_09.jdk/Contents/Home
                setenv ANT_HOME /sw/lib/ant 

        About Free BSD
        See the document in the UNAVCO GSAC website, installation page.

################################################################################

A Database for GSAC

An essential part of GSAC installation and operations, which is not available from online resources, is a database which you create and maintain, about sites (stations), their instruments, and their data files (if any). The GSAC database contains the information about stations which you wish to offer online, and about stations' data files which you wish to offer for download. The database must contain up-to-date, complete, and correct information if GSAC services are to represent your data repository correctly. (The GSAC database is also a good way to manage contents of your data repository, aside from GSAC operations, if it is well designed. To manage a data center, a well-designed database is much less error prone, and much more suited to computer operations, than text files such as IGS site logs or SINEX files.)

There are two ways to supply a database for GSAC. First, you can use an existing Oracle, Postgres, or MySQL database about your data holdings and stations, if it has the database fields used by GSAC. See the GSAC database schema notes at http://facility.unavco.org/data/gsacws/docs/Prototype_GSAC_Database_MySQL_schema_notes.txt. This set of parameters enables GSAC to provide its complete suite of web services for searching for geodesy stations information and for station instrument data files, and for data file downloads by GSAC. This list is provided so that persons considering GSAC may see if they have adequate types of metadata in an exisiting database to support GSAC web services. In general the fields which may be NULL in the database are not required for GSAC operations. This schema is for MySQL but the parallel to Postgres and Oracle should be clear.

Or, second, you can create a new a database for GSAC for your data center. UNAVCO supplies a standard or prototype GSAC database in MySQL (a schema in a MySQL .sql or dump file). The schema supports geodesy data search and discovery, and all the GSAC formats of search results including web pages, and SINEX and GAMIT station.info files. You can download the MySQL schema .sql file 
Prototype_GSAC_Database.sql (http://facility.unavco.org/data/gsacws/docs/Prototype_GSAC_Database.sql) for the prototype GSAC database (a MySQL "dump file"). (You can look at this MySQL file in your browser too: click on it.) This prototype schema may be revised in future, but it is quite complete now.
To understand the meaning of tables and fields in this database, see the GSAC database schema notes at http://facility.unavco.org/data/gsacws/docs/Prototype_GSAC_Database_MySQL_schema_notes.txt. 

The tables and fields (columns) in the prototype GSAC schema show the essential parameters needed for GSAC, and their data types. The prototype design corresponds to common geodesy needs, such as encapsulating station receiver-antenna sessions, and helps avoid error-prone database practices, such as storing latitude values or time values in a character strings. The prototype design includes features to insure reduced problems in an archive database. For example, only actual dates and numbers can be stored in date and number fields. Databases which store dates or numbers as character strings are error-prone and difficult to manage. GSAC uses all times and dates in UTC, in ISO 8601 format.

To create a new MySQL GSAC prototype database using that .sql file:
- if you do not have MySQL, install it. On some Linux systems you can simply do the command sudo apt-get install mysql-server. This requests a you to enter a new so-called "root" password for MySQL use, which is a new password, not your Linux system root password.
- start the MySQL server, for example in Linux with "sudo /etc/init.d/mysql restart"
- cd to the folder with the file Prototype_GSAC_Database.sql
- edit the .sql file to change the name of the database, before you use mysql to create the database. You can change all instances of `Prototype_GSAC_Database` to your new db name, something like MyCenter_GSAC_database; the name is not particularly important and will not be publically visible.
- run mysql as mysql root and create a new MySQL account for GSAC, called for example gsac
- run the mysql command line tool, such as, in Linux, "mysql -u gsac -p"
(MySQL documentation is online, as at http://dev.mysql.com/doc/refman/5.1/en/index.html).
- in mysql (mysql>) do the command source Prototype_GSAC_Database.sql; (including the ;)

This creates a GSAC prototype MySQL database, which is of course initially empty of your GNSS metadata. 


Populate the Database

You need to populate the database with the information about your stations, instruments, and instrument data files. UNAVCO has a script to populate the GSAC prototype database with information about geodesy data files you already have on an FTP or HTTP site. UNAVCO is creating a script to populate a GSAC prototype database from a SINEX file (which may be tricky to use). If you use the GSAC prototype database design, you can email UNAVCO to get whatever version of these scripts we have to help you populate your database. The scripts are written in Python.

UNAVCO can aid and advise about GSAC installations and operations. UNAVCO has a responsibility to ensure that GSAC itself installs properly. UNAVCO can help install GSAC, in some cases including providing a provisional working database with some of your data center's information, if some conditions are met including your use of the provisional database schema. UNAVCO will populate the provisional database with an initial but incomplete set of data, just enough to ensure that GSAC is working.

Completely populating your database, and maintaining it, is necessary to operate GSAC, but doing so is not part of GSAC. 

Correctly populating and maintaining the database used by GSAC is the responsibility of the GSAC operator. 

Also, GSAC does not check data values, GNSS file quality, or otherwise manage a data archive. GSAC can not update your database. GSAC is web services, not a content management system. 
GSAC is intentionally designed to *not* know about geodesy or other domains, to keep it adapable to a wide range of services and to simplify adding new types of data file and new GSAC features. 


################################################################################    ################################################################################

Installing the GSAC Web Services Software Package for a Data Repository, Part 1.

 
GSAC has a set of core Java code (the "GSAC Service Layer," or GSL), and related code.  

You download the GSAC code from SourceForge, and compile it without making any changes to it.  (Then you will create a set of code for your particular data center, which calls the core code.)

Get GSAC from SourceForge

Choose or make a top-level working directory for GSAC, and go there. For example:

mkdir ~/GSAC/

cd    ~/GSAC/

Check out the GSAC code from SourceForge by entering this command:
(to find this command at SourceForge, go to https://sourceforge.net/projects/gsac/ and click on the 'Code' menu item in the 'Summary Files ...' menu line.)

svn export svn://svn.code.sf.net/p/gsac/code/trunk gsac-code

(svn export simply downloads all the files for the project, with no revision control permission required.  svn checkout is used if you have a developer's role, to check in new code to GSAC on SourceForge.)

The svn export command creates a new folder named gsac-code, and many folders and files in it.


Building GSAC core code.

cd gsac-code/

Do an initial ant build with the command:

ant

Look for any error messages.  If there are none, you have completed the GSAC core code.  This process makes a Java jar file, named gsacws.jar, in GSAC/gsac-code/lib/, with size about 5 MB.
This file contains the executable GSAC core code, in effect.  This jar file will be used to build your final Java jar file for your complete GSAC server code.


################################################################################ ################################################################################


Updating GSAC to get new core code from SourceForge.

After you are operating a GSAC service, you may wish to update your core GSAC code, to use new features, or corrections, added to GSAC 
after you first installed GSAC.

Running 'ant' in GSAC/gsac-code/ (or wherever you put GSAC on your system) builds the core GSAC code, as just described.

This step (but not the SourceForge svn export step) is also used from time to time when GSAC developers have checked in new code to SourceForge.

To update your GSAC with that new code, first do svn update to get the bew source code files.

Usually you do these 4 commands: 

cd ~/GSAC/gsac-code/src/org/gsac

svn update

cd ~/GSAC/gsac-code/

ant

and then again build your local GSAC code in your GSAC code area, with ant, as described below.


################################################################################ ################################################################################


Begin to make GSAC, adapted for your data repository.

Set Map Area.

Use the file ~/GSAC/gsac-code/src/org/gsac/gsl/htdocs/repositorymap.js 

to set the longitude, latitude, and map zoom level for the center of the map GSAC shown shows in site search results on a web page.  For example:

  var defaultLocation = new OpenLayers.LonLat(14.15, 48.5);
  var defaultZoomLevel = 5;

The defaultZoomLevel value 3 shows a map about 10000 km across;  6 will show an area about 1200 km wide by 800 km high. 

The unchanged file repositorymap.js from SourceForge shows Europe.  If your data is from Europe, you not not have to revise this file.


Again build the GSAC core code with command 'ant', executed in ~/GSAC/gsac-code/.  
You may find the screen messages interesting to show the process of a GSAC build. 


Begin your data center's GSAC code.

cd  ~/GSAC/gsac-code/src/org/gsac/template/

The file macros.properties has:

    ##
    ## Properties used to generate a new GSAC repository. This is a template or model of a similar file to make a new instance of a GSAC installation.
    ##
    ## Make a new version of this file with a different name, which will be used to automatically build the initial version of your GSAC installation.
    ## See instructions in the GSAC package in the file  README in gsac-code/src/org/gsac/.
    ##

    ## To name the repository (spaces are allowed); can use any character string such as The Boulder GPS GSAC Repository
    target.name=Boulder GPS Repository

    ## This is used to create the jar and war release file names; replace the 'demo' part, making for example bouldergsac. No spaces.
    target.basename=bouldergsac

    ## A standard Java package name.  Replace the 'agency' part, making for example org.nasa.gsac.  This also controls making and naming the new directory path to hold your GSAC installations's code.
    target.package=org.boulder.gsac
    ## If your agency is not an "org", use the appropriate value such as pt., fr., de., is., edu.

    ## All of the new Java .java files and .class files for your GSAC installation will have the following prefix for their names.
    ## Replace Demo with a short name for your data repository, something like Boulder.  Use no spaces, and with only the first letter in upper case, to match Java class naming conventions.
    target.prefix=Boulder

    ## Choose which Java database driver (in GSAC) to read the database your GSAC code will read.  Choose (uncomment) one of these three:
    target.dbdriver=mysql.jar
    #target.dbdriver=oracleDriver.jar
    #target.dbdriver=postgres.jar

Copy that file macros.properties to a temporary working file (any new name), such as  

cp macros.properties mymacros.properties  

The new file name does not matter. You only use this file one time.

Edit the new properties file to set values for your repository GSAC.  For example, new values something like these:

    target.name=The Boulder GNSS Repository  
    target.basename=bouldergsac     
    target.package=org.boulder.gsac  [If your agency is not an "org", use the appropriate value such as pt., fr., de., is., edu.]
    target.prefix= Boulder          
    target.dbdriver=mysql.jar     

Then

cd ../   

(i.e. cd to GSAC/gsac-code/src/org/gsac/)

Then run a command like this, with the new properties file name in place of mymacros.properties:

ant -propertyfile template/mymacros.properties makerepository   

Screen output should be like this:

> ant -propertyfile template/mymacros.properties makerepository
Buildfile: build.xml
init:
makerepository:
     [echo] dir = org/boulder/gsac
     [echo] dots = ../../../..
    [mkdir] Created dir: /home/GSAC/gsac-code/src/org/boulder/gsac
     [copy] Copying 16 files to /home/GSAC/gsac-code/src/org/boulder/gsac
init:
copyjava:
     [copy] Copying 1 file to /home/GSAC/gsac-code/src/org/boulder/gsac
init:
copyjava:
     [copy] Copying 1 file to /home/GSAC/gsac-code/src/org/boulder/gsac
...
     [echo] Repository source package has been created
BUILD SUCCESSFUL

Look to be sure no errors occur.  

This process creates a new code area (new folders), and new Java files for your GSAC installation, beginning with a new folder, such as

~/GSAC/gsac-code/src/org/boulder/ 

and populates it with some initial and all-new directories and files for your GSAC repository's code.

cd to the just-made new directory with new GSAC code just for your repository, such as 

cd ~/GSAC/gsac-code/src/org/boulder/gsac/ 

Follow the README file there to complete your GSAC installation. That is README Part 2. 

(end of basic installation section of README Part 1).

################################################################################ ################################################################################
################################################################################ ################################################################################

To Build a Federated GSAC

To learn about federated GSACs, see the UNAVCO GSAC web site.

You can install a federated GSAC now, without installing GSAC server for data downloads as described in README Part 2.

Installing a federated GSAC is much simpler than installing GSAC for a data repository. 
You do not use a database for a federated GSAC.  

If you have not already installed GSAC in any way, do the following step 1. 

Otherwise do svn update for your GSAC core code again (unless you did svn update after 12 Mar 2014), 
to get the original working code for federated GSACs, and then go to step 2.

The installation instructions for federated GSACs are also included in the GSAC package from SourceForge, in the file  README_GSAC_Federated_Installation, 
for example in ~/GSAC/gsac-code/src/org/gsac/federated/README_GSAC_Federated_Installation.  (ignore the file 'README there)

###########################################   ###########################################

1.  Install the GSAC package.

First read "GSAC System Requirements" above or in the UNAVCO GSAC web site.

Install GSAC core code, as described in the GSAC web site, repeated here:

    GSAC has a set of core code (the "GSAC Service Layer," or GSL), Java files and related files.

    Download the GSAC core code package from SourceForge, and compile it without making any changes to it.  

    To Get GSAC from SourceForge:

    Choose or make a top-level working directory for GSAC, and go there. For example:

    mkdir ~/GSAC/

    cd    ~/GSAC/

    Check out the GSAC code from SourceForge by entering this command:
    (to find this command at SourceForge, go to https://sourceforge.net/projects/gsac/,
      and click on the 'Code' menu item in the 'Summary Files ...' menu line.)

    svn export svn://svn.code.sf.net/p/gsac/code/trunk gsac-code

    (svn export simply downloads all the files for the package, with no SourceForge revision control permission required.  
     svn checkout is used if you have a developer's role, to check in new code to GSAC on SourceForge.)

    The svn export creates a new folder named gsac-code, and many folders and files in it.

    Build the GSAC core code:

    cd ~/GSAC/gsac-code/   [or your top level in GSAC directories]

    Do an initial ant build with the command:

    ant

    Look for any error messages.  If there are none, you have completed the GSAC core code.  
    This process makes a Java jar file, named gsacws.jar, in ~/GSAC/gsac-code/lib/, with size about 5 MB.
    This file contains the executable GSAC core code, in effect.  This jar file will be used to build your final Java .jar file, and Tomcat .war file, for your complete GSAC server code.


###########################################   ###########################################

2. Specify connections to remote GSACs.

Federated GSACs use the services provided by other GSAC installations, usually at remote locations. Federated GSACs do not use a local data repository.

You must tell your federated GSAC about the other GSACs to use.

Go to the gsac/federated/ directory in your GSAC package, for example, something like  ~/GSAC/gsac-code/src/org/gsac/federated/.  
The files to make a federated GSAC are here.

Edit the file ~/GSAC/gsac-code/src/org/gsac/federated/resources/gsacserver_test.properties to specify the values for the remote GSACs to use.  
Lines beginning with '#' are comments.  Here is an example of the complete file:

    # For a federated GSAV, specify remote GSACs to use, and your GSAC's host.
    # (This file gsacserver_test.properties gets copied to gsacserver.properties when you do ant.)

    # Set the host name and port for the repository (your local server info, where your GSAC will run):
    gsac.server.hostname=facdev.unavco.org
    gsac.server.port=80

    # For the remote GSACs to connect to, specify:
    #gsac.federated.servers=                                     A comma-separated list of the remote GSACs (your own names, for use in this file only)
    #gsac.federated.<id>.url=                                    A known URL for a remote GSAC, or the "Base URL" from the Infomation page on each remote GSAC web site (which can in some cases be incorrect).
    #gsac.federated.<id>.name=name                               To show this name on your federated GSAC, a name for a remote GSAC repository 
    #gsac.federated.<id>.icon=url                                To link to small icon for that remote repository. Will be used inside web page tables of results, so a height < 50 pixels is good.

    # examples (URLS shown are non-working):

    gsac.federated.servers=geoazur,noanet

    gsac.federated.geoazur.url=http://epos.unice.fr/gazgsac
    gsac.federated.geoazur.name=Geoazur GPS Repository
    gsac.federated.geoazur.icon=https://geoazur.oca.eu/IMG/png/OCA.png

    gsac.federated.noanet.url=http://www.noa.gr/gsacnoanet
    gsac.federated.noanet.name=NOANET GPS Repository
    gsac.federated.noanet.icon=http://www.gein.noa.gr/services/GPS/NOA_GPS/noa_gps_files/images/temp/sample-post-1.jpg

Ignore the file resources/gsacserver_production.properties.

###########################################   ###########################################

3. Edit files for your federated GSAC's web page header and footer.

Edit federated/resources/header.html to create your GSAC web page header.
Image files are kept in federated/resources/htdocs.

There is a complete HTML footer file, federated/resources/footer.html, for your GSAC web pages.
You may change it, if you wish to.

The FederatedSiteManager.java and FederatedResourceManager.java files should NOT be changed. Make no changes to
any java files in gsac/federated/.


###########################################   ###########################################

4. Build and Deploy the Federated GSAC.

To build your federated GSAC, in 

~/GSAC/gsac-code/src/org/gsac/federated/

do

ant

This ant command builds a .jar file and a .war file, and copies resources/gsacserver_test.properties to resources/gsacserver.properties.

The customary GSAC test command "ant runserver" will usually fail because it cannot connect to remote GSACs.
You must deploy the federated GSAC on a web server, typically with Tomcat, to test it.

The ant build makes a new Tomcat war file, gsacfederated.war, in your gsac dist/ directory, such as:

~/GSAC/gsac-code/dist/gsacfederated.war

To see the exact path for your gsacfederated.war file, look in the ant build screen output for a line like this:

    [war] Building war: /home/devel/GSAC/gsac-code/dist/gsacfederated.war

Copy the gsacfederated.war file to your web server host, in the Tomcat server area, such as

/usr/local/apachetomcat/webapps/

If you use Tomcat HotDeploy the new GSAC server will be deployed and the federated GSAC will be available.
Without HotDeploy you will need to restart the Tomcat service.

Your federated GSAC URL will have a Base URL something like http://www.boulder.org/gsacfederated.


end of README for installing a federated GSAC.

###########################################   ###########################################


################################################################################

end of README Part 1 for GSAC installation.

Copyright (C) 2014 UNAVCO.

################################################################################
