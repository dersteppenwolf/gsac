
################################################################################
What's here?
################################################################################

gsl:
This is the core GSAC Service Layer implementation

client:
Java based client for accessing a GSAC repository


ramadda:
The RAMADDA GSAC plugin

federated:
This is the implemention of the federated repository


################################################################################
Generating your initial repository package
################################################################################
The template directory holds a template of an initial GSAC repository package 
implementation. This allows you to generate a package with all of the boilerplate
Java code and build scripts.

What you need to do is define a set of macro values that are used to take the code in the 
template package and make an initial Java package 

Copy the example template/macros.properties file to your own file, e.g.:
   cp template/macros.properties    yourmacros.properties

Edit the yourmacros.properties and define the target package name, directory, etc.

Then run (from this directory, i.e., /src/org/gsac):
ant -propertyfile yourmacros.properties makerepository

This will copy all of the source and resource files templates, replacing the macros with
the values you defined in yourmacros.properties and place them in the specified target directory. 

Now, the hard part... 
You need to actually implement your repository. See the README file in the generated package.



