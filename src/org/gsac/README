
################################################################################

GSAC README, Part 1.
Building a GSAC server for your data repository.

How to create a new implementation of the UNAVCO GSAC-WS Web Services suite 
to provide web service access to a geoscience data repository.
The UNAVCO GSAC-WS home page is http://facility.unavco.org/data/gsacws/gsacws.html

The User Guide, "UNAVCO GSAC WS: Web Services for Geodesy Data Repositories,"
http://facility.unavco.org/data/gsacws/UNAVCO_GSAC_User_Guide.pdf,
lists software tools needed for building GSAC, and details the first steps in installing GSAC, which must have been done already
if you are reading this in a GSAC installation.  

This README files describes the next steps in GSAC installation.
This is the README file from  gsac/trunk/src/org/gsac/ and is the first of two README files detailing GSAC installation.

################################################################################

You should have done the following already:

Make a working area, for example:
mkdir ~/gsac/sourceforge/

Check out the GSAC code from SourceForge, using subversion:
cd ~/gsac/sourceforge/
svn co https://gsac.svn.sourceforge.net/svnroot/gsac gsac

Do the initial build with ant:
cd gsac/trunk/ 
ant 

This ant command builds the basic GSAC code, including the GSL (the GSAC service layer), and a GSAC server.  
ant uses the build.xml in the directory where ant is run.

################################################################################

Next, starting in ~/gsac/sourceforge/gsac/trunk/: 

cd src/org/gsac/

What's in trunk/src/org/gsac/:
 
build.xml: used by ant 

gsl/: This has the core GSAC Service Layer implementation

client/: Java based client for accessing a GSAC repository

ramadda/: The RAMADDA GSAC plugin, for the RAMADDA content management system.

federated/: This is the implemention of the federated repository

package.html:

template/:  see next:

################################################################################
Generating Your Initial GSAC-WS repository package
################################################################################

The template directory (src/org/gsac/template/) holds the template for the initial GSAC repository package 
implementation. This allows you to generate a package with all of the boilerplate Java code and build scripts.

What you need to do is define a set of macro values that are used to take the code in the 
template package and make an initial Java package or GSAC.

Copy the example template/macros.properties file to your own similar file, e.g.:

cd template/
cp macros.properties   myrepomacros.properties

'myrepo' is only a placeholder here, in these instructions.  Replace the 'myrepo' with your choice of name for your agency, project, or repository. 

Edit the  new properties file to define the target package name, directory, etc. 

For example:

##Name you want for the repository
target.name=myrepo GSAC Repository

##This is used to create the jar and war release file names
target.basename=gsacmyrepo

##target package name; replace the 'myrepo' part only:
target.package=org.myrepo.gsac

##All of the java classes will have this prefix as the first part of their names
target.prefix=Myrepo

# What database driver jar file do we use? (This gets added to the generated build.xml to include the right jar file.)
target.dbdriver=mysql.jar

Other choices for the database driver file are postgres.jar and oracleDriver.jar.


Then cd ../ to src/org/gsac/, and run this ant command in src/org/gsac/, replacing the 'myrepomacros.properties' file name with your file name:

ant -propertyfile template/myrepomacros.properties makerepository

This will copy all of the source and resource files templates to new directories and files, replacing the macros with
the values you defined in myrepomacros.properties, and place them in the specified new target directory, such as src/org/myrepo/. 

For example, for a new implementation called test2013a, doing this list (from src/org/gsac/) gets:

ls -l ../test2013a/gsac
-rw-r--r-- 1   9851 2013-02-13 11:38 build.xml
drwxr-xr-x 2   4096 2013-02-13 11:38 dbresources
-rw-r--r-- 1    520 2013-02-13 11:38 gsacrepository.bat
-rw-r--r-- 1    802 2013-02-13 11:38 gsacrepository.sh
-rw-r--r-- 1    779 2013-02-13 11:38 package.html
-rw-r--r-- 1  38199 2013-02-13 11:38 README
drwxr-xr-x 2   4096 2013-02-13 11:38 release
drwxr-xr-x 2   4096 2013-02-13 11:38 resources
-rw-r--r-- 1   2046 2013-02-13 11:38 test2013aDatabaseManager.java
-rw-r--r-- 1   5299 2013-02-13 11:38 test2013aFileManager.java
-rw-r--r-- 1   2443 2013-02-13 11:38 test2013aRepository.java
-rw-r--r-- 1   1666 2013-02-13 11:38 test2013aServer.java
-rw-r--r-- 1  11231 2013-02-13 11:38 test2013aSiteManager.java
-rw-r--r-- 1   3440 2013-02-13 11:38 test2013aTest.java


The template file org/gsac/template/README has been extended and copied to your new package, for example, 
to src/org/myrepo/gsac/README, and it has the next set of instructions for you to follow to complete your GSAC installation.  

Note that the myrepomacros.properties file is only used this one time.

See Part 2 of GSAC implementation, the second and final README file, in the newly generated package, such as src/org/myrepo/gsac/README.

################################################################################
