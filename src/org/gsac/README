##############################################################c################################################################

                                                     GSAC Installation

                            README, Part 1.  Creating an Initial GSAC server at your Data Center 

                                           7 July 2014.  Stuart Wier, UNAVCO
                                               Copyright (C) 2014 UNAVCO.

Introduction

UNAVCO's GSAC is a package of code for web services. With GSAC a geodesy or geophysics data center can offer a set of complete, 
consistent, modern web services for remote users to query the data center about stations and instruments, and download data 
files make by the instruments, and product files such as plots.  The UNAVCO GSAC home page is at 
http://facility.unavco.org/data/gsacws/gsacws.html. 

This README file describes the first steps in GSAC installation, and is Part 1 of two README files detailing GSAC installation.  
This file is found in gsac-code/src/org/gsac/ in the GSAC package available from SourceForge, as described below.

These instructions apply both to installing GSAC services for a data repository, and to installing a Federated GSAC which merges 
GSAC services from several separate data repository GSACs.  To install a Federated GSAC, follow the instructions in this README 
file except the section "Create GSAC configuration files and make your initial GSAC,"  and then follow the section "To Build a 
Federated GSAC".

These instructions use a hypothetical "Boulder" agency and data repository, running a GPS network called "BoulderNet." You will 
use other words in place of these.

About Time Formats in GSAC

GSAC tries to use all date and time values in the ISO 8601 format, like "yyyy-MM-dd HH:mm:ss", to avoid the complexities and 
error-prone behavior of using several different formats. Internally GSAC avoids use of character strings for time.  Date and 
time values in the ISO 8601 format as character strings may be easily entered into and extracted from databases as databases' 
native datetime objects.  Date and time values in the ISO 8601 format as character strings may be easily converted into Java 
Date objects.

GSAC treats all time values as UTC times, and does not expect the optional Z or time zone hour number in an ISO 8601 value.  
GSAC does not expect times in the database to be in any time zone other than UTC.  You may if you wish enter such times but 
that is discouraged.

##############################################################c################################################################


Installing the GSAC Web Services Software Package for a Data Repository, Part 1.

First review these sections in the UNAVCO GSAC web site, "GSAC Installation" page:

System Requirements

Local Repository Implementation Code

A Database for GSAC

The web site is at http://www.unavco.org/software/data-management/gsac/gsac.html, or simply Google "UNAVCO GSAC" to find the 
UNAVCO GSAC web site.


##############################################################c################################################################

Install the GSAC core code

    GSAC has a set of core code (the "GSAC Service Layer," or GSL), used by all installations.

    You download the GSAC code package from SourceForge, and compile it, without making any changes to it.

    Get GSAC from SourceForge:

    Choose or make a top-level working directory for GSAC, and go there. For example:

mkdir ~/GSAC/

cd    ~/GSAC/

    Check out the GSAC code from SourceForge by entering this command:

svn export svn://svn.code.sf.net/p/gsac/code/trunk gsac-code

    (to find this command at SourceForge, go to https://sourceforge.net/projects/gsac/, and click on the 'Code' menu item
        in the 'Summary Files ...' menu line.)

    (svn *export* simply downloads all the files for the project, with no revision control permission required.  
     svn checkout is used if you have a developer's role, to check in new code to GSAC on SourceForge.)

    The svn command creates a new folder named gsac-code, and many folders in it, and downloads about 650 or 700 files 
    from GSAC at SourceForge.

    Build the GSAC core code.

cd ~/GSAC/gsac-code/

    Do an initial ant build with the command:

ant

    This process sends information to the screen, like "gsl: Building GSL", and takes about 30 to 60 seconds.
    The final lines from a successful build are like:

localinit:
init:
war:
   [copy] Copying 1 file to /home/dev/GSAC/gsac-code/dist
   [delete] Deleting:       /home/dev/GSAC/gsac-code/dist/gsacea1.0/servlet-api.jar
   [war] Building war:      /home/dev/GSAC/gsac-code/dist/gsacea.war
BUILD SUCCESSFUL
Total time: 36 seconds

    Look for any error messages.  If there are none, you have completed the GSAC core code.

    This process makes a Java jar file, named gsacws.jar, in GSAC/gsac-code/lib/, with size about 5 MB.
    This file "contains" the built and executable GSAC core code, in effect.  This jar file will be used to build your final
    Java jar file for your complete GSAC server code.

    End of part 1, installation of GSAC core code.


##############################################################c################################################################


Updating GSAC to get new core code from SourceForge.

After you are operating a GSAC service, you may wish to update your core GSAC code, to use new features, or corrections, added
to GSAC after you first installed GSAC.

Running 'ant' in GSAC/gsac-code/ (or wherever you put GSAC on your system) builds the core GSAC code, as just described.

This step (but not the SourceForge svn export step) is also used from time to time when GSAC developers have checked in new code
to SourceForge.

To update your GSAC with that new code, first do svn update to get the bew source code files.

Usually you do these 4 commands: 

cd ~/GSAC/gsac-code/src/org/gsac

svn update

cd ~/GSAC/gsac-code/

ant

and then again build your local GSAC code in your GSAC code area, with ant, as described below.


##############################################################c################################################################

Create GSAC configuration files and make your initial GSAC.


Set Map Area:

Use the file ~/GSAC/gsac-code/src/org/gsac/gsl/htdocs/repositorymap.js 

to set the longitude, latitude, and map zoom level for the center of the map GSAC shown shows in site search results on a web page.  
For example:

  var defaultLocation = new OpenLayers.LonLat(14.15, 48.5);
  var defaultZoomLevel = 5;

The defaultZoomLevel value 3 shows a map about 10000 km across;  6 will show an area about 1200 km wide by 800 km high. 

The unchanged file repositorymap.js from SourceForge shows Europe.  If your data is from Europe, you not not have to revise this 
file.


Again build the GSAC core code with command 'ant', executed in ~/GSAC/gsac-code/.  
You may find the screen messages interesting to show the process of a GSAC build. 


Use "ant makerepository" to create your initial set of local implementation files:

cd  ~/GSAC/gsac-code/src/org/gsac/template/

    The file macros.properties hasm for example:

    ## To name the repository (spaces are allowed); can use any character string such as The Boulder GPS GSAC Repository
    target.name=Boulder GPS Repository

    ## This is used to create the jar and war release file names; replace the 'demo' part, making for example bouldergsac. No spaces.
    target.basename=bouldergsac

    ## A standard Java package name.  Replace the 'agency' part, making for example org.nasa.gsac.  
    ## This also controls making and naming the new directory path to hold your GSAC installations's code.
    ## If your agency is not an "org", use the appropriate value such as pt., fr., de., is., edu.
    target.package=org.boulder.gsac

    ## All of the new Java .java files and .class files for your GSAC installation will have the following prefix for their names.
    ## Replace Demo with a short name for your data repository, something like Boulder.  Use no spaces, and with only the first 
    ## letter in upper case, to match Java class naming conventions.
    target.prefix=Boulder

    ## Choose which Java database driver (in GSAC) to read the database your GSAC code will read.  Choose (uncomment) one of these three:
    target.dbdriver=mysql.jar
    #target.dbdriver=oracleDriver.jar
    #target.dbdriver=postgres.jar

    Copy the file macros.properties to a temporary working file (any new name), such as  

cp macros.properties mymacros.properties  

    The new file name does not matter. You only use this file one time.

    Edit the new properties file to set values for your repository GSAC.  For example, new values something like these:

    target.name=The Boulder GNSS Repository  
    target.basename=bouldergsac     
    target.package=org.boulder.gsac  [If your agency is not an "org", use the appropriate value such as pt., fr., de., is., edu.]
    target.prefix= Boulder          
    target.dbdriver=mysql.jar     

    Then

cd ../   

    (i.e. cd to ~/GSAC/gsac-code/src/org/gsac/)

    Then run a command like this, with the new properties file name in place of mymacros.properties:

ant -propertyfile template/mymacros.properties makerepository   

    Screen output should be like this:

ant -propertyfile template/mymacros.properties makerepository

Buildfile: build.xml
init:
makerepository:
     [echo] dir = org/boulder/gsac
     [echo] dots = ../../../..
    [mkdir] Created dir: /home/GSAC/gsac-code/src/org/boulder/gsac
     [copy] Copying 16 files to /home/GSAC/gsac-code/src/org/boulder/gsac
init:
copyjava:
     [copy] Copying 1 file to /home/GSAC/gsac-code/src/org/boulder/gsac
init:
copyjava:
     [copy] Copying 1 file to /home/GSAC/gsac-code/src/org/boulder/gsac
...
     [echo] Repository source package has been created
BUILD SUCCESSFUL

   Look to be sure no errors occur.  

   This process creates a new code area (new folders), and new Java files for your GSAC installation, i
   beginning with a new folder, such as ~/GSAC/gsac-code/src/org/boulder/ 
   and populates it with some initial and all-new directories and files for your GSAC repository's code.

   cd to the just-made new directory with new GSAC code just for your repository, such as 

cd ~/GSAC/gsac-code/src/org/boulder/gsac/ 


Follow the README file there to complete your GSAC installation. That is README Part 2. 

End of GSAC basic installation section of README Part 1.


##############################################################c################################################################
##############################################################c################################################################

To Build a Federated GSAC

To learn about federated GSACs, see the UNAVCO GSAC web site.

You can install a federated GSAC now, without installing GSAC server for data downloads as described in README Part 2.

Installing a federated GSAC is much simpler than installing GSAC for a data repository. 
You do not use a database for a federated GSAC.  

If you have not already installed GSAC in any way, do step 1 below. 

Otherwise do svn update for your GSAC core code again (unless you did svn update after 12 Mar 2014), 
to get the original working code for federated GSACs, and then go to step 2.

The installation instructions for federated GSACs are also included in the GSAC package from SourceForge, in the file  
README_GSAC_Federated_Installation, for example in ~/GSAC/gsac-code/src/org/gsac/federated/README_GSAC_Federated_Installation. 
(ignore the file 'README there)

###########################################   ###########################################

1.  Install the GSAC package.

First read "GSAC System Requirements" above or in the UNAVCO GSAC web site.

Install GSAC core code, as described in the GSAC web site, repeated here:

    GSAC has a set of core code (the "GSAC Service Layer," or GSL), Java files and related files.

    Download the GSAC core code package from SourceForge, and compile it without making any changes to it.  

    To Get GSAC from SourceForge:

    Choose or make a top-level working directory for GSAC, and go there. For example:

    mkdir ~/GSAC/

    cd    ~/GSAC/

    Check out the GSAC code from SourceForge by entering this command:
    (to find this command at SourceForge, go to https://sourceforge.net/projects/gsac/,
      and click on the 'Code' menu item in the 'Summary Files ...' menu line.)

    svn export svn://svn.code.sf.net/p/gsac/code/trunk gsac-code

    (svn export simply downloads all the files for the package, with no SourceForge revision control permission required.  
     svn checkout is used if you have a developer's role, to check in new code to GSAC on SourceForge.)

    The svn export creates a new folder named gsac-code, and many folders and files in it.

    Build the GSAC core code:

    cd ~/GSAC/gsac-code/   [or your top level in GSAC directories]

    Do an initial ant build with the command:

    ant

    Look for any error messages.  If there are none, you have completed the GSAC core code.  
    This process makes a Java jar file, named gsacws.jar, in ~/GSAC/gsac-code/lib/, with size about 5 MB.
    This file contains the executable GSAC core code, in effect.  This jar file will be used to build your final Java .jar file, 
    and Tomcat .war file, for your complete GSAC server code.

###########################################   ###########################################

2. Specify connections to remote GSACs.

Federated GSACs use the services provided by other GSAC installations, usually at remote locations. Federated GSACs do not 
use a local data repository.

You must tell your federated GSAC about the other GSACs to use.

Go to the gsac/federated/ directory in your GSAC package, for example, something like  ~/GSAC/gsac-code/src/org/gsac/federated/.  
The files to make a federated GSAC are here.

Edit the file ~/GSAC/gsac-code/src/org/gsac/federated/resources/gsacserver_test.properties to specify the values for the remote 
GSACs to use.  Lines beginning with '#' are comments.  Here is an example of the complete file:

    # For a federated GSAV, specify remote GSACs to use, and your GSAC's host.
    # (This file gsacserver_test.properties gets copied to gsacserver.properties when you do ant.)

    # Set the host name and port for the repository (your local server info, where your GSAC will run):
    gsac.server.hostname=facdev.unavco.org
    gsac.server.port=80

    # For the remote GSACs to connect to, specify:
    #gsac.federated.servers=        A comma-separated list of the remote GSACs (your own names, for use in this file only)
    #gsac.federated.<id>.url=       A known URL for a remote GSAC, or the "Base URL" from the Infomation page on each remote 
                                    # GSAC web site (which can in some cases be incorrect).
    #gsac.federated.<id>.name=name  To show this name on your federated GSAC, a name for a remote GSAC repository 
    #gsac.federated.<id>.icon=url   To link to small icon for that remote repository. Will be used inside web page tables of results,
                                    # so a height < 50 pixels is good.

    # examples (URLS shown are non-working):

    gsac.federated.servers=geoazur,noanet

    gsac.federated.geoazur.url=http://epos.unice.fr/gazgsac
    gsac.federated.geoazur.name=Geoazur GPS Repository
    gsac.federated.geoazur.icon=https://geoazur.oca.eu/IMG/png/OCA.png

    gsac.federated.noanet.url=http://www.noa.gr/gsacnoanet
    gsac.federated.noanet.name=NOANET GPS Repository
    gsac.federated.noanet.icon=http://www.gein.noa.gr/services/GPS/NOA_GPS/noa_gps_files/images/temp/sample-post-1.jpg

Ignore the file resources/gsacserver_production.properties.

###########################################   ###########################################

3. Edit files for your federated GSAC's web page header and footer.

Edit federated/resources/header.html to create your GSAC web page header.
Image files are kept in federated/resources/htdocs.

There is a complete HTML footer file, federated/resources/footer.html, for your GSAC web pages.
You may change it, if you wish to.

The FederatedSiteManager.java and FederatedResourceManager.java files should NOT be changed. Make no changes to
any java files in gsac/federated/.


###########################################   ###########################################

4. Build and Deploy the Federated GSAC.

To build your federated GSAC, in 

~/GSAC/gsac-code/src/org/gsac/federated/

do

ant

This ant command builds a .jar file and a .war file, and copies resources/gsacserver_test.properties 
to resources/gsacserver.properties.

The customary GSAC test command "ant runserver" will usually fail because it cannot connect to remote GSACs.
You must deploy the federated GSAC on a web server, typically with Tomcat, to test it.

The ant build makes a new Tomcat war file, gsacfederated.war, in your gsac dist/ directory, such as:

~/GSAC/gsac-code/dist/gsacfederated.war

To see the exact path for your gsacfederated.war file, look in the ant build screen output for a line like this:

    [war] Building war: /home/devel/GSAC/gsac-code/dist/gsacfederated.war

Copy the gsacfederated.war file to your web server host, in the Tomcat server area, such as

/usr/local/apachetomcat/webapps/

If you use Tomcat HotDeploy the new GSAC server will be deployed and the federated GSAC will be available.
Without HotDeploy you will need to restart the Tomcat service.

Your federated GSAC URL will have a Base URL something like http://www.boulder.org/gsacfederated.


end of README for installing a federated GSAC.

##############################################################c################################################################

end of README Part 1 for GSAC installation.

Copyright (C) 2014 UNAVCO.

##############################################################c################################################################
